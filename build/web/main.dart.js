// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 2.19.2 (stable) (Tue Feb 7 18:37:17 2023 +0000) on "linux_x64"
// Module: zapp_user_main
// Flags: soundNullSafety(true), enableAsserts(true)
define('zapp_user_main', ['dart_sdk', 'flutter_sdk'], (function load__zapp_user_main(dart_sdk, flutter_sdk) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const js = dart_sdk.js;
  const ui = dart_sdk.ui;
  const _js_helper = dart_sdk._js_helper;
  const _internal = dart_sdk._internal;
  const math = dart_sdk.math;
  const html = dart_sdk.html;
  const collection = dart_sdk.collection;
  const typed_data = dart_sdk.typed_data;
  const js_util = dart_sdk.js_util;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const framework = flutter_sdk.src__widgets__framework;
  const theme_data = flutter_sdk.src__material__theme_data;
  const app = flutter_sdk.src__material__app;
  const scaffold = flutter_sdk.src__material__scaffold;
  const app_bar = flutter_sdk.src__material__app_bar;
  const text = flutter_sdk.src__widgets__text;
  const basic = flutter_sdk.src__widgets__basic;
  const flex = flutter_sdk.src__rendering__flex;
  const text_style = flutter_sdk.src__painting__text_style;
  const elevated_button = flutter_sdk.src__material__elevated_button;
  const bottom_navigation_bar = flutter_sdk.src__material__bottom_navigation_bar;
  const bottom_navigation_bar_item = flutter_sdk.src__widgets__bottom_navigation_bar_item;
  const image = flutter_sdk.src__widgets__image;
  const colors = flutter_sdk.src__material__colors;
  const navigator = flutter_sdk.src__widgets__navigator;
  const page = flutter_sdk.src__material__page;
  const async$ = flutter_sdk.src__widgets__async;
  const icon_button = flutter_sdk.src__material__icon_button;
  const scroll_view = flutter_sdk.src__widgets__scroll_view;
  const list_tile = flutter_sdk.src__material__list_tile;
  const checkbox = flutter_sdk.src__material__checkbox;
  const $switch = flutter_sdk.src__material__switch;
  const theme = flutter_sdk.src__material__theme;
  const editable_text = flutter_sdk.src__widgets__editable_text;
  const edge_insets = flutter_sdk.src__painting__edge_insets;
  const text_field = flutter_sdk.src__material__text_field;
  const input_decorator = flutter_sdk.src__material__input_decorator;
  const text_input = flutter_sdk.src__services__text_input;
  const snack_bar = flutter_sdk.src__material__snack_bar;
  const expansion_tile = flutter_sdk.src__material__expansion_tile;
  const binding = flutter_sdk.src__widgets__binding;
  const plugin_registry = flutter_sdk.src__plugin_registry;
  const system_navigator = flutter_sdk.src__services__system_navigator;
  const message_codec = flutter_sdk.src__services__message_codec;
  const message_codecs = flutter_sdk.src__services__message_codecs;
  const stack = flutter_sdk.src__rendering__stack;
  const platform_view = flutter_sdk.src__widgets__platform_view;
  const basic_types = flutter_sdk.src__foundation__basic_types;
  const recognizer = flutter_sdk.src__gestures__recognizer;
  const platform_view$ = flutter_sdk.src__rendering__platform_view;
  const platform_views = flutter_sdk.src__services__platform_views;
  const system_channels = flutter_sdk.src__services__system_channels;
  const url_strategy = flutter_sdk.src__navigation__url_strategy;
  const events = flutter_sdk.src__gestures__events;
  const platform_channel = flutter_sdk.src__services__platform_channel;
  var $46zapp_entry = Object.create(dart.library);
  var main = Object.create(dart.library);
  var web_plugin_registrant = Object.create(dart.library);
  var url_launcher_web = Object.create(dart.library);
  var link = Object.create(dart.library);
  var url_launcher_platform_interface = Object.create(dart.library);
  var link$ = Object.create(dart.library);
  var dart_ui = Object.create(dart.library);
  var types = Object.create(dart.library);
  var url_launcher_platform = Object.create(dart.library);
  var dart_ui_real = Object.create(dart.library);
  var plugin_platform_interface = Object.create(dart.library);
  var method_channel_url_launcher = Object.create(dart.library);
  var $toString = dartx.toString;
  var $padLeft = dartx.padLeft;
  var $remainder = dartx.remainder;
  var $length = dartx.length;
  var $_get = dartx._get;
  var $isNotEmpty = dartx.isNotEmpty;
  var $toStringAsFixed = dartx.toStringAsFixed;
  var $navigator = dartx.navigator;
  var $open = dartx.open;
  var $startsWith = dartx.startsWith;
  var $userAgent = dartx.userAgent;
  var $contains = dartx.contains;
  var $_equals = dartx._equals;
  var $isEmpty = dartx.isEmpty;
  var $onClick = dartx.onClick;
  var $_set = dartx._set;
  var $style = dartx.style;
  var $opacity = dartx.opacity;
  var $display = dartx.display;
  var $width = dartx.width;
  var $height = dartx.height;
  var $cursor = dartx.cursor;
  var $setAttribute = dartx.setAttribute;
  var $removeAttribute = dartx.removeAttribute;
  var $remove = dartx.remove;
  var $target = dartx.target;
  var $shadowRoot = dartx.shadowRoot;
  var $tagName = dartx.tagName;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T = {
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    ListOfString: () => (T.ListOfString = dart.constFn(core.List$(core.String)))(),
    ListOfStringTodynamic: () => (T.ListOfStringTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T.ListOfString()])))(),
    JSArrayOfString: () => (T.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    dynamicToNull: () => (T.dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))(),
    VoidToNull: () => (T.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    ObjectAndStackTraceTovoid: () => (T.ObjectAndStackTraceTovoid = dart.constFn(dart.fnType(dart.void, [core.Object, core.StackTrace])))(),
    ZoneAndZoneDelegateAndZone__Tovoid: () => (T.ZoneAndZoneDelegateAndZone__Tovoid = dart.constFn(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, core.String])))(),
    BuildContextToSettingsScreen: () => (T.BuildContextToSettingsScreen = dart.constFn(dart.fnType(main.SettingsScreen, [framework.BuildContext])))(),
    BuildContextToSavingScreen: () => (T.BuildContextToSavingScreen = dart.constFn(dart.fnType(main.SavingScreen, [framework.BuildContext])))(),
    BuildContextToDonationScreen: () => (T.BuildContextToDonationScreen = dart.constFn(dart.fnType(main.DonationScreen, [framework.BuildContext])))(),
    BuildContextToProfileScreen: () => (T.BuildContextToProfileScreen = dart.constFn(dart.fnType(main.ProfileScreen, [framework.BuildContext])))(),
    BuildContextToWidget: () => (T.BuildContextToWidget = dart.constFn(dart.fnType(framework.Widget, [framework.BuildContext])))(),
    IdentityMapOfString$BuildContextToWidget: () => (T.IdentityMapOfString$BuildContextToWidget = dart.constFn(_js_helper.IdentityMap$(core.String, T.BuildContextToWidget())))(),
    TimerTovoid: () => (T.TimerTovoid = dart.constFn(dart.fnType(dart.void, [async.Timer])))(),
    JSArrayOfWidget: () => (T.JSArrayOfWidget = dart.constFn(_interceptors.JSArray$(framework.Widget)))(),
    JSArrayOfBottomNavigationBarItem: () => (T.JSArrayOfBottomNavigationBarItem = dart.constFn(_interceptors.JSArray$(bottom_navigation_bar_item.BottomNavigationBarItem)))(),
    ObjectN: () => (T.ObjectN = dart.constFn(dart.nullable(core.Object)))(),
    BuildContextToAchievementScreen: () => (T.BuildContextToAchievementScreen = dart.constFn(dart.fnType(main.AchievementScreen, [framework.BuildContext])))(),
    BuildContextToInfoScreen: () => (T.BuildContextToInfoScreen = dart.constFn(dart.fnType(main.InfoScreen, [framework.BuildContext])))(),
    intTovoid: () => (T.intTovoid = dart.constFn(dart.fnType(dart.void, [core.int])))(),
    intToString: () => (T.intToString = dart.constFn(dart.fnType(core.String, [core.int])))(),
    FutureBuilderOfvoid: () => (T.FutureBuilderOfvoid = dart.constFn(async$.FutureBuilder$(dart.void)))(),
    AsyncSnapshotOfvoid: () => (T.AsyncSnapshotOfvoid = dart.constFn(async$.AsyncSnapshot$(dart.void)))(),
    BuildContextAndAsyncSnapshotOfvoidToText: () => (T.BuildContextAndAsyncSnapshotOfvoidToText = dart.constFn(dart.fnType(text.Text, [framework.BuildContext, T.AsyncSnapshotOfvoid()])))(),
    BuildContextAndintToColumn: () => (T.BuildContextAndintToColumn = dart.constFn(dart.fnType(basic.Column, [framework.BuildContext, core.int])))(),
    JSArrayOfAchievement: () => (T.JSArrayOfAchievement = dart.constFn(_interceptors.JSArray$(main.Achievement)))(),
    boolTovoid: () => (T.boolTovoid = dart.constFn(dart.fnType(dart.void, [core.bool])))(),
    StringTovoid: () => (T.StringTovoid = dart.constFn(dart.fnType(dart.void, [core.String])))(),
    LinkInfoToWebLinkDelegate: () => (T.LinkInfoToWebLinkDelegate = dart.constFn(dart.fnType(link$.WebLinkDelegate, [link.LinkInfo])))(),
    FutureOfbool: () => (T.FutureOfbool = dart.constFn(async.Future$(core.bool)))(),
    VoidTobool: () => (T.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    ExpandoOfObject: () => (T.ExpandoOfObject = dart.constFn(core.Expando$(core.Object)))(),
    LinkedHashSetOfString: () => (T.LinkedHashSetOfString = dart.constFn(collection.LinkedHashSet$(core.String)))(),
    CompleterOfByteData: () => (T.CompleterOfByteData = dart.constFn(async.Completer$(typed_data.ByteData)))(),
    FutureOrOfByteData: () => (T.FutureOrOfByteData = dart.constFn(async.FutureOr$(typed_data.ByteData)))(),
    FutureOrNOfByteData: () => (T.FutureOrNOfByteData = dart.constFn(dart.nullable(T.FutureOrOfByteData())))(),
    FutureOrNOfByteDataTovoid: () => (T.FutureOrNOfByteDataTovoid = dart.constFn(dart.fnType(dart.void, [], [T.FutureOrNOfByteData()])))(),
    FutureOfvoid: () => (T.FutureOfvoid = dart.constFn(async.Future$(dart.void)))(),
    PlatformViewCreationParamsToLinkViewController: () => (T.PlatformViewCreationParamsToLinkViewController = dart.constFn(dart.fnType(link$.LinkViewController, [platform_view.PlatformViewCreationParams])))(),
    FactoryOfOneSequenceGestureRecognizer: () => (T.FactoryOfOneSequenceGestureRecognizer = dart.constFn(basic_types.Factory$(recognizer.OneSequenceGestureRecognizer)))(),
    BuildContextAndPlatformViewControllerToPlatformViewSurface: () => (T.BuildContextAndPlatformViewControllerToPlatformViewSurface = dart.constFn(dart.fnType(platform_view.PlatformViewSurface, [framework.BuildContext, platform_views.PlatformViewController])))(),
    MouseEventTovoid: () => (T.MouseEventTovoid = dart.constFn(dart.fnType(dart.void, [html.MouseEvent])))(),
    voidToNull: () => (T.voidToNull = dart.constFn(dart.fnType(core.Null, [dart.void])))(),
    IdentityMapOfString$dynamic: () => (T.IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(core.String, dart.dynamic)))(),
    IdentityMapOfint$LinkViewController: () => (T.IdentityMapOfint$LinkViewController = dart.constFn(_js_helper.IdentityMap$(core.int, link$.LinkViewController)))(),
    intN: () => (T.intN = dart.constFn(dart.nullable(core.int)))(),
    intToElement: () => (T.intToElement = dart.constFn(dart.fnType(html.Element, [core.int])))(),
    IdentityMapOfString$Object: () => (T.IdentityMapOfString$Object = dart.constFn(_js_helper.IdentityMap$(core.String, core.Object)))(),
    boolN: () => (T.boolN = dart.constFn(dart.nullable(core.bool)))(),
    boolNTobool: () => (T.boolNTobool = dart.constFn(dart.fnType(core.bool, [T.boolN()])))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.fn(main.main, T.VoidTovoid());
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 1000000
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 16,
        [EdgeInsets_right]: 16,
        [EdgeInsets_top]: 16,
        [EdgeInsets_left]: 16
      });
    },
    get C3() {
      return C[3] = dart.constMap(core.String, core.String, []);
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: core.Object.prototype
      });
    },
    get C5() {
      return C[5] = dart.constSet(core.String, ["mailto", "tel", "sms"]);
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: link.LinkTarget.prototype,
        [debugLabel$]: "defaultTarget"
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: link.LinkTarget.prototype,
        [debugLabel$]: "self"
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: link.LinkTarget.prototype,
        [debugLabel$]: "blank"
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: message_codecs.JSONMethodCodec.prototype
      });
    },
    get C10() {
      return C[10] = dart.constSet(T.FactoryOfOneSequenceGestureRecognizer(), []);
    },
    get C11() {
      return C[11] = dart.fn(link$.LinkViewController._onGlobalClick, T.MouseEventTovoid());
    },
    get C12() {
      return C[12] = dart.fn(link$.LinkViewController._viewFactory, T.intToElement());
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: types.PreferredLaunchMode.prototype,
        [_Enum__name]: "platformDefault",
        [_Enum_index]: 0
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: types.PreferredLaunchMode.prototype,
        [_Enum__name]: "inAppWebView",
        [_Enum_index]: 1
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: types.PreferredLaunchMode.prototype,
        [_Enum__name]: "inAppBrowserView",
        [_Enum_index]: 2
      });
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: types.PreferredLaunchMode.prototype,
        [_Enum__name]: "externalApplication",
        [_Enum_index]: 3
      });
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: types.PreferredLaunchMode.prototype,
        [_Enum__name]: "externalNonBrowserApplication",
        [_Enum_index]: 4
      });
    },
    get C13() {
      return C[13] = dart.constList([C[14] || CT.C14, C[15] || CT.C15, C[16] || CT.C16, C[17] || CT.C17, C[18] || CT.C18], types.PreferredLaunchMode);
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: types.InAppWebViewConfiguration.prototype,
        [headers$]: C[3] || CT.C3,
        [enableDomStorage$]: true,
        [enableJavaScript$]: true
      });
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: message_codecs.StandardMessageCodec.prototype
      });
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: message_codecs.StandardMethodCodec.prototype,
        [StandardMethodCodec_messageCodec]: C[22] || CT.C22
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: platform_channel.MethodChannel.prototype,
        [MethodChannel__binaryMessenger]: null,
        [MethodChannel_codec]: C[21] || CT.C21,
        [MethodChannel_name]: "plugins.flutter.io/url_launcher"
      });
    }
  }, false);
  var C = Array(23).fill(void 0);
  var I = [
    "file:///zapp/project/lib/main.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/plugin_platform_interface-2.1.6/lib/plugin_platform_interface.dart",
    "package:plugin_platform_interface/plugin_platform_interface.dart",
    "package:url_launcher_platform_interface/src/url_launcher_platform.dart",
    "package:url_launcher_web/url_launcher_web.dart",
    "package:url_launcher_platform_interface/link.dart",
    "package:url_launcher_web/src/link.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/url_launcher_web-2.0.19/lib/src/link.dart",
    "package:url_launcher_platform_interface/src/types.dart",
    "package:url_launcher_platform_interface/method_channel_url_launcher.dart"
  ];
  $46zapp_entry.runAppGuarded = function runAppGuarded() {
    async.runZonedGuarded(core.Null, dart.fn(() => {
      if (T.ListOfStringTodynamic().is(C[0] || CT.C0)) {
        T.ListOfStringTodynamic().as(C[0] || CT.C0)(T.JSArrayOfString().of([]));
      } else {
        (C[0] || CT.C0)();
      }
      if (js.context.hasProperty("__notifyFlutterRendered")) {
        async.Future.delayed(new core.Duration.new({milliseconds: 250})).then(core.Null, dart.fn(_ => {
          js.context.callMethod("__notifyFlutterRendered", [false]);
        }, T.dynamicToNull()));
      }
    }, T.VoidToNull()), dart.fn((e, stackTrace) => {
      if (js.context.hasProperty("zappHandlerUserError")) {
        js.context.callMethod("zappHandlerUserError", [e[$toString](), stackTrace.toString()]);
      }
    }, T.ObjectAndStackTraceTovoid()), {zoneSpecification: new async._ZoneSpecification.new({print: dart.fn((self, parent, zone, line) => {
          if (js.context.hasProperty("zappHandlerUserPrint")) {
            js.context.callMethod("zappHandlerUserPrint", [line]);
          }
        }, T.ZoneAndZoneDelegateAndZone__Tovoid())})});
  };
  $46zapp_entry.main = function main$() {
    return async.async(dart.void, function* main() {
      yield ui.webOnlyWarmupEngine({runApp: dart.fn(() => {
          $46zapp_entry.runAppGuarded();
        }, T.VoidToNull()), registerPlugins: dart.fn(() => {
          web_plugin_registrant.registerPlugins();
        }, T.VoidToNull())});
    });
  };
  main.MyApp = class MyApp extends framework.StatefulWidget {
    createState() {
      return new main._MyAppState.new();
    }
    static ['_#new#tearOff']() {
      return new main.MyApp.new();
    }
  };
  (main.MyApp.new = function() {
    main.MyApp.__proto__.new.call(this);
    ;
  }).prototype = main.MyApp.prototype;
  dart.addTypeTests(main.MyApp);
  dart.addTypeCaches(main.MyApp);
  dart.setMethodSignature(main.MyApp, () => ({
    __proto__: dart.getMethods(main.MyApp.__proto__),
    createState: dart.fnType(main._MyAppState, [])
  }));
  dart.setLibraryUri(main.MyApp, I[0]);
  var _theme = dart.privateName(main, "_theme");
  main._MyAppState = class _MyAppState extends framework.State$(main.MyApp) {
    setTheme(isDarkMode) {
      this.setState(dart.fn(() => {
        this[_theme] = isDarkMode ? theme_data.ThemeData.dark() : theme_data.ThemeData.light();
      }, T.VoidTovoid()));
    }
    build(context) {
      return new app.MaterialApp.new({title: "BreatheClear v1", theme: this[_theme], home: new main.HomeScreen.new({setTheme: dart.bind(this, 'setTheme')}), routes: new (T.IdentityMapOfString$BuildContextToWidget()).from(["/settings", dart.fn(context => new main.SettingsScreen.new({setTheme: dart.bind(this, 'setTheme')}), T.BuildContextToSettingsScreen()), "/saving", dart.fn(context => new main.SavingScreen.new(), T.BuildContextToSavingScreen()), "/donation", dart.fn(context => new main.DonationScreen.new(), T.BuildContextToDonationScreen()), "/profile", dart.fn(context => new main.ProfileScreen.new(), T.BuildContextToProfileScreen())])});
    }
    static ['_#new#tearOff']() {
      return new main._MyAppState.new();
    }
  };
  (main._MyAppState.new = function() {
    this[_theme] = theme_data.ThemeData.dark();
    main._MyAppState.__proto__.new.call(this);
    ;
  }).prototype = main._MyAppState.prototype;
  dart.addTypeTests(main._MyAppState);
  dart.addTypeCaches(main._MyAppState);
  dart.setMethodSignature(main._MyAppState, () => ({
    __proto__: dart.getMethods(main._MyAppState.__proto__),
    setTheme: dart.fnType(dart.void, [core.bool]),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main._MyAppState, I[0]);
  dart.setFieldSignature(main._MyAppState, () => ({
    __proto__: dart.getFields(main._MyAppState.__proto__),
    [_theme]: dart.fieldType(theme_data.ThemeData)
  }));
  var setTheme$ = dart.privateName(main, "HomeScreen.setTheme");
  main.HomeScreen = class HomeScreen extends framework.StatefulWidget {
    get setTheme() {
      return this[setTheme$];
    }
    set setTheme(value) {
      super.setTheme = value;
    }
    static ['_#new#tearOff'](opts) {
      let setTheme = opts && 'setTheme' in opts ? opts.setTheme : null;
      return new main.HomeScreen.new({setTheme: setTheme});
    }
    createState() {
      return new main._HomeScreenState.new();
    }
  };
  (main.HomeScreen.new = function(opts) {
    let setTheme = opts && 'setTheme' in opts ? opts.setTheme : null;
    this[setTheme$] = setTheme;
    main.HomeScreen.__proto__.new.call(this);
    ;
  }).prototype = main.HomeScreen.prototype;
  dart.addTypeTests(main.HomeScreen);
  dart.addTypeCaches(main.HomeScreen);
  dart.setMethodSignature(main.HomeScreen, () => ({
    __proto__: dart.getMethods(main.HomeScreen.__proto__),
    createState: dart.fnType(main._HomeScreenState, [])
  }));
  dart.setLibraryUri(main.HomeScreen, I[0]);
  dart.setFieldSignature(main.HomeScreen, () => ({
    __proto__: dart.getFields(main.HomeScreen.__proto__),
    setTheme: dart.finalFieldType(dart.fnType(dart.dynamic, [core.bool]))
  }));
  var ___HomeScreenState__timer = dart.privateName(main, "_#_HomeScreenState#_timer");
  var ___HomeScreenState__startTime = dart.privateName(main, "_#_HomeScreenState#_startTime");
  var ___HomeScreenState__elapsedTime = dart.privateName(main, "_#_HomeScreenState#_elapsedTime");
  var _isCounting = dart.privateName(main, "_isCounting");
  var _timer = dart.privateName(main, "_timer");
  var _startTime = dart.privateName(main, "_startTime");
  var _elapsedTime = dart.privateName(main, "_elapsedTime");
  var Duration__duration = dart.privateName(core, "Duration._duration");
  var _checkAchievements = dart.privateName(main, "_checkAchievements");
  var _startTimer = dart.privateName(main, "_startTimer");
  var _resetTimer = dart.privateName(main, "_resetTimer");
  var _startCountup = dart.privateName(main, "_startCountup");
  var _formatDuration = dart.privateName(main, "_formatDuration");
  var _getRandomQuote = dart.privateName(main, "_getRandomQuote");
  main._HomeScreenState = class _HomeScreenState extends framework.State$(main.HomeScreen) {
    get [_timer]() {
      let t0;
      t0 = this[___HomeScreenState__timer];
      return t0 == null ? dart.throw(new _internal.LateError.fieldNI("_timer")) : t0;
    }
    set [_timer](_timer$35param) {
      this[___HomeScreenState__timer] = _timer$35param;
    }
    get [_startTime]() {
      let t0;
      t0 = this[___HomeScreenState__startTime];
      return t0 == null ? dart.throw(new _internal.LateError.fieldNI("_startTime")) : t0;
    }
    set [_startTime](_startTime$35param) {
      this[___HomeScreenState__startTime] = _startTime$35param;
    }
    get [_elapsedTime]() {
      let t0;
      t0 = this[___HomeScreenState__elapsedTime];
      return t0 == null ? dart.throw(new _internal.LateError.fieldNI("_elapsedTime")) : t0;
    }
    set [_elapsedTime](_elapsedTime$35param) {
      this[___HomeScreenState__elapsedTime] = _elapsedTime$35param;
    }
    initState() {
      super.initState();
      this[_startTime] = new core.DateTime.now();
      this[_elapsedTime] = new core.Duration.new({seconds: 0});
    }
    dispose() {
      this[_timer].cancel();
      super.dispose();
    }
    [_startTimer]() {
      let oneSecond = C[1] || CT.C1;
      this[_timer] = async.Timer.periodic(oneSecond, dart.fn(timer => {
        this.setState(dart.fn(() => {
          this[_elapsedTime] = new core.DateTime.now().difference(this[_startTime]);
        }, T.VoidTovoid()));
        this[_checkAchievements]();
      }, T.TimerTovoid()));
    }
    [_resetTimer]() {
      this.setState(dart.fn(() => {
        this[_isCounting] = false;
        this[_elapsedTime] = new core.Duration.new({seconds: 0});
      }, T.VoidTovoid()));
      this[_timer].cancel();
    }
    [_startCountup]() {
      if (!this[_isCounting]) {
        this.setState(dart.fn(() => {
          this[_isCounting] = true;
          this[_startTime] = new core.DateTime.now();
        }, T.VoidTovoid()));
        this[_startTimer]();
      }
    }
    [_checkAchievements]() {
      for (let achievement of main.AchievementScreen.achievements) {
        if (this[_elapsedTime]['>='](achievement.timeRequired) && !achievement.isCompleted) {
          this.setState(dart.fn(() => {
            achievement.isCompleted = true;
          }, T.VoidTovoid()));
        }
      }
    }
    build(context) {
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: new text.Text.new("BreatheClear v1.0")}), body: new basic.Center.new({child: new basic.Column.new({mainAxisAlignment: flex.MainAxisAlignment.center, children: T.JSArrayOfWidget().of([new main.ProfileGreeting.new(), new basic.SizedBox.new({height: 20}), new text.Text.new(this[_formatDuration](this[_elapsedTime]), {style: new text_style.TextStyle.new({fontSize: 18})}), new basic.SizedBox.new({height: 20}), new elevated_button.ElevatedButton.new({onPressed: dart.fn(() => {
                  if (this[_isCounting]) {
                    this[_resetTimer]();
                  } else {
                    this[_startCountup]();
                  }
                }, T.VoidTovoid()), child: new text.Text.new(this[_isCounting] ? "Refresh" : "Start")}), new basic.SizedBox.new({height: 80}), new text.Text.new(this[_getRandomQuote](), {style: new text_style.TextStyle.new({fontSize: 20, fontWeight: ui.FontWeight.bold}), textAlign: ui.TextAlign.center})])})}), bottomNavigationBar: new bottom_navigation_bar.BottomNavigationBar.new({type: bottom_navigation_bar.BottomNavigationBarType.fixed, items: T.JSArrayOfBottomNavigationBarItem().of([new bottom_navigation_bar_item.BottomNavigationBarItem.new({icon: new image.Image.asset("assets/home.png", {width: 24, height: 24}), label: "Home"}), new bottom_navigation_bar_item.BottomNavigationBarItem.new({icon: new image.Image.asset("assets/saving.png", {width: 24, height: 24}), label: "Saving"}), new bottom_navigation_bar_item.BottomNavigationBarItem.new({icon: new image.Image.asset("assets/achievements.png", {width: 24, height: 24}), label: "Achievements"}), new bottom_navigation_bar_item.BottomNavigationBarItem.new({icon: new image.Image.asset("assets/settings.png", {width: 24, height: 24}), label: "Settings"}), new bottom_navigation_bar_item.BottomNavigationBarItem.new({icon: new image.Image.asset("assets/donation.png", {width: 24, height: 24}), label: "Donation"}), new bottom_navigation_bar_item.BottomNavigationBarItem.new({icon: new image.Image.asset("assets/info.png", {width: 24, height: 24}), label: "Info"}), new bottom_navigation_bar_item.BottomNavigationBarItem.new({icon: new image.Image.asset("assets/profile.png", {width: 24, height: 24}), label: "Profile"})]), selectedItemColor: colors.Colors.blue, onTap: dart.fn(index => {
            switch (index) {
              case 0:
                {
                  break;
                }
              case 1:
                {
                  navigator.Navigator.pushNamed(T.ObjectN(), context, "/saving");
                  break;
                }
              case 2:
                {
                  navigator.Navigator.push(dart.dynamic, context, new page.MaterialPageRoute.new({builder: dart.fn(context => new main.AchievementScreen.new(), T.BuildContextToAchievementScreen())}));
                  break;
                }
              case 3:
                {
                  navigator.Navigator.push(dart.dynamic, context, new page.MaterialPageRoute.new({builder: dart.fn(context => new main.SettingsScreen.new({setTheme: this.widget.setTheme}), T.BuildContextToSettingsScreen())}));
                  break;
                }
              case 4:
                {
                  navigator.Navigator.pushNamed(T.ObjectN(), context, "/donation");
                  break;
                }
              case 5:
                {
                  navigator.Navigator.push(dart.dynamic, context, new page.MaterialPageRoute.new({builder: dart.fn(context => new main.InfoScreen.new(), T.BuildContextToInfoScreen())}));
                  break;
                }
              case 6:
                {
                  navigator.Navigator.pushNamed(T.ObjectN(), context, "/profile");
                  break;
                }
            }
          }, T.intTovoid())})});
    }
    [_formatDuration](duration) {
      function twoDigits(n) {
        return n[$toString]()[$padLeft](2, "0");
      }
      dart.fn(twoDigits, T.intToString());
      let twoDigitMinutes = twoDigits(duration.inMinutes[$remainder](60));
      let twoDigitSeconds = twoDigits(duration.inSeconds[$remainder](60));
      let twoDigitHours = twoDigits(duration.inHours[$remainder](24));
      let twoDigitDays = twoDigits(duration.inDays);
      return twoDigitDays + " days " + twoDigitHours + " hours " + twoDigitMinutes + " minutes " + twoDigitSeconds + " seconds";
    }
    [_getRandomQuote]() {
      let quotes = T.JSArrayOfString().of(["“If you accept the expectations of others, especially negative ones, then you never will change the outcome.”\n– Michael Jordan", "“Recovery is about progression, not perfection.”\n– Unknown", "“The only person you are destined to become is the person you decide to be.”\n– Ralph Waldo Emerson", "“One of the hardest things was learning that I was worth recovery.”\n– Demi Lovato", "“You have to break down before you can breakthrough.”\n– Marilyn Ferguson"]);
      let random = math.Random.new();
      return quotes[$_get](random.nextInt(quotes[$length]));
    }
    static ['_#new#tearOff']() {
      return new main._HomeScreenState.new();
    }
  };
  (main._HomeScreenState.new = function() {
    this[___HomeScreenState__timer] = null;
    this[___HomeScreenState__startTime] = null;
    this[___HomeScreenState__elapsedTime] = null;
    this[_isCounting] = false;
    main._HomeScreenState.__proto__.new.call(this);
    ;
  }).prototype = main._HomeScreenState.prototype;
  dart.addTypeTests(main._HomeScreenState);
  dart.addTypeCaches(main._HomeScreenState);
  dart.setMethodSignature(main._HomeScreenState, () => ({
    __proto__: dart.getMethods(main._HomeScreenState.__proto__),
    [_startTimer]: dart.fnType(dart.void, []),
    [_resetTimer]: dart.fnType(dart.void, []),
    [_startCountup]: dart.fnType(dart.void, []),
    [_checkAchievements]: dart.fnType(dart.void, []),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    [_formatDuration]: dart.fnType(core.String, [core.Duration]),
    [_getRandomQuote]: dart.fnType(core.String, [])
  }));
  dart.setGetterSignature(main._HomeScreenState, () => ({
    __proto__: dart.getGetters(main._HomeScreenState.__proto__),
    [_timer]: async.Timer,
    [_startTime]: core.DateTime,
    [_elapsedTime]: core.Duration
  }));
  dart.setSetterSignature(main._HomeScreenState, () => ({
    __proto__: dart.getSetters(main._HomeScreenState.__proto__),
    [_timer]: async.Timer,
    [_startTime]: core.DateTime,
    [_elapsedTime]: core.Duration
  }));
  dart.setLibraryUri(main._HomeScreenState, I[0]);
  dart.setFieldSignature(main._HomeScreenState, () => ({
    __proto__: dart.getFields(main._HomeScreenState.__proto__),
    [___HomeScreenState__timer]: dart.fieldType(dart.nullable(async.Timer)),
    [___HomeScreenState__startTime]: dart.fieldType(dart.nullable(core.DateTime)),
    [___HomeScreenState__elapsedTime]: dart.fieldType(dart.nullable(core.Duration)),
    [_isCounting]: dart.fieldType(core.bool)
  }));
  main.ProfileGreeting = class ProfileGreeting extends framework.StatefulWidget {
    createState() {
      return new main._ProfileGreetingState.new();
    }
    static ['_#new#tearOff']() {
      return new main.ProfileGreeting.new();
    }
  };
  (main.ProfileGreeting.new = function() {
    main.ProfileGreeting.__proto__.new.call(this);
    ;
  }).prototype = main.ProfileGreeting.prototype;
  dart.addTypeTests(main.ProfileGreeting);
  dart.addTypeCaches(main.ProfileGreeting);
  dart.setMethodSignature(main.ProfileGreeting, () => ({
    __proto__: dart.getMethods(main.ProfileGreeting.__proto__),
    createState: dart.fnType(main._ProfileGreetingState, [])
  }));
  dart.setLibraryUri(main.ProfileGreeting, I[0]);
  var ___ProfileGreetingState__profileDataFuture = dart.privateName(main, "_#_ProfileGreetingState#_profileDataFuture");
  var _name = dart.privateName(main, "_name");
  var _surname = dart.privateName(main, "_surname");
  var _profileDataFuture = dart.privateName(main, "_profileDataFuture");
  var _getProfileData = dart.privateName(main, "_getProfileData");
  main._ProfileGreetingState = class _ProfileGreetingState extends framework.State$(main.ProfileGreeting) {
    get [_profileDataFuture]() {
      let t0;
      t0 = this[___ProfileGreetingState__profileDataFuture];
      return t0 == null ? dart.throw(new _internal.LateError.fieldNI("_profileDataFuture")) : t0;
    }
    set [_profileDataFuture](_profileDataFuture$35param) {
      this[___ProfileGreetingState__profileDataFuture] = _profileDataFuture$35param;
    }
    initState() {
      super.initState();
      this[_profileDataFuture] = this[_getProfileData]();
    }
    build(context) {
      return new (T.FutureBuilderOfvoid()).new({future: this[_profileDataFuture], builder: dart.fn((context, snapshot) => {
          if (snapshot.connectionState === async$.ConnectionState.waiting) {
            return new text.Text.new("Welcome back!");
          } else {
            if (this[_name][$isNotEmpty] && this[_surname][$isNotEmpty]) {
              return new text.Text.new("Welcome back " + this[_name] + " " + this[_surname] + "!");
            } else {
              return new text.Text.new("Welcome back!");
            }
          }
        }, T.BuildContextAndAsyncSnapshotOfvoidToText())});
    }
    [_getProfileData]() {
      return async.async(dart.void, (function* _getProfileData() {
        yield async.Future.delayed(new core.Duration.new({seconds: 2}));
        this[_name] = "John";
        this[_surname] = "Doe";
      }).bind(this));
    }
    static ['_#new#tearOff']() {
      return new main._ProfileGreetingState.new();
    }
  };
  (main._ProfileGreetingState.new = function() {
    this[___ProfileGreetingState__profileDataFuture] = null;
    this[_name] = "";
    this[_surname] = "";
    main._ProfileGreetingState.__proto__.new.call(this);
    ;
  }).prototype = main._ProfileGreetingState.prototype;
  dart.addTypeTests(main._ProfileGreetingState);
  dart.addTypeCaches(main._ProfileGreetingState);
  dart.setMethodSignature(main._ProfileGreetingState, () => ({
    __proto__: dart.getMethods(main._ProfileGreetingState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    [_getProfileData]: dart.fnType(async.Future$(dart.void), [])
  }));
  dart.setGetterSignature(main._ProfileGreetingState, () => ({
    __proto__: dart.getGetters(main._ProfileGreetingState.__proto__),
    [_profileDataFuture]: async.Future$(dart.void)
  }));
  dart.setSetterSignature(main._ProfileGreetingState, () => ({
    __proto__: dart.getSetters(main._ProfileGreetingState.__proto__),
    [_profileDataFuture]: async.Future$(dart.void)
  }));
  dart.setLibraryUri(main._ProfileGreetingState, I[0]);
  dart.setFieldSignature(main._ProfileGreetingState, () => ({
    __proto__: dart.getFields(main._ProfileGreetingState.__proto__),
    [___ProfileGreetingState__profileDataFuture]: dart.fieldType(dart.nullable(async.Future$(dart.void))),
    [_name]: dart.fieldType(core.String),
    [_surname]: dart.fieldType(core.String)
  }));
  main.AchievementScreen = class AchievementScreen extends framework.StatelessWidget {
    build(context) {
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: new text.Text.new("Achievement"), leading: new icon_button.IconButton.new({icon: new image.Image.asset("assets/back_arrow.png"), onPressed: dart.fn(() => {
              navigator.Navigator.pop(T.ObjectN(), context);
            }, T.VoidTovoid())})}), body: new scroll_view.ListView.builder({itemCount: main.AchievementScreen.achievements[$length], itemBuilder: dart.fn((context, index) => new basic.Column.new({children: T.JSArrayOfWidget().of([new list_tile.ListTile.new({title: new text.Text.new(main.AchievementScreen.achievements[$_get](index).name), trailing: new checkbox.Checkbox.new({value: main.AchievementScreen.achievements[$_get](index).isCompleted, onChanged: null})}), new basic.SizedBox.new({height: 8})])}), T.BuildContextAndintToColumn())})});
    }
    [_formatDuration](duration) {
      function twoDigits(n) {
        return n[$toString]()[$padLeft](2, "0");
      }
      dart.fn(twoDigits, T.intToString());
      let twoDigitMinutes = twoDigits(duration.inMinutes[$remainder](60));
      let twoDigitSeconds = twoDigits(duration.inSeconds[$remainder](60));
      let twoDigitHours = twoDigits(duration.inHours[$remainder](24));
      let twoDigitDays = twoDigits(duration.inDays);
      return twoDigitDays + " days " + twoDigitHours + " hours " + twoDigitMinutes + " minutes " + twoDigitSeconds + " seconds";
    }
    static ['_#new#tearOff']() {
      return new main.AchievementScreen.new();
    }
  };
  (main.AchievementScreen.new = function() {
    main.AchievementScreen.__proto__.new.call(this);
    ;
  }).prototype = main.AchievementScreen.prototype;
  dart.addTypeTests(main.AchievementScreen);
  dart.addTypeCaches(main.AchievementScreen);
  dart.setMethodSignature(main.AchievementScreen, () => ({
    __proto__: dart.getMethods(main.AchievementScreen.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    [_formatDuration]: dart.fnType(core.String, [core.Duration])
  }));
  dart.setLibraryUri(main.AchievementScreen, I[0]);
  dart.setStaticFieldSignature(main.AchievementScreen, () => ['achievements']);
  dart.defineLazy(main.AchievementScreen, {
    /*main.AchievementScreen.achievements*/get achievements() {
      return T.JSArrayOfAchievement().of([new main.Achievement.new({name: "- 20 minutes later: your heart rate and blood pressure drop.", timeRequired: new core.Duration.new({minutes: 20})}), new main.Achievement.new({name: "- 12 hours later: the carbon monoxide level in your blood returns to normal.", timeRequired: new core.Duration.new({hours: 12})}), new main.Achievement.new({name: "- 1 month later: your blood circulation improves and your lung function improves.", timeRequired: new core.Duration.new({days: 30})}), new main.Achievement.new({name: "- 4 months later: your cough and shortness of breath decrease.", timeRequired: new core.Duration.new({days: 120})}), new main.Achievement.new({name: "- 1 year later: your risk of coronary heart disease is half that of a smoker.", timeRequired: new core.Duration.new({days: 365})}), new main.Achievement.new({name: "- 5 years later: your risk of stroke is reduced to that of someone who has not smoked for 5-15 years.", timeRequired: new core.Duration.new({days: 1825})}), new main.Achievement.new({name: "- 10 years later: your risk of dying from lung cancer is about half that of a smoker.", timeRequired: new core.Duration.new({days: 3650})}), new main.Achievement.new({name: "- 15 years later: your risk of coronary heart disease is reduced to that of a non-smoker.", timeRequired: new core.Duration.new({days: 5475})})]);
    }
  }, false);
  var name$ = dart.privateName(main, "Achievement.name");
  var timeRequired$ = dart.privateName(main, "Achievement.timeRequired");
  var isCompleted$ = dart.privateName(main, "Achievement.isCompleted");
  main.Achievement = class Achievement extends core.Object {
    get name() {
      return this[name$];
    }
    set name(value) {
      super.name = value;
    }
    get timeRequired() {
      return this[timeRequired$];
    }
    set timeRequired(value) {
      super.timeRequired = value;
    }
    get isCompleted() {
      return this[isCompleted$];
    }
    set isCompleted(value) {
      this[isCompleted$] = value;
    }
    static ['_#new#tearOff'](opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      let timeRequired = opts && 'timeRequired' in opts ? opts.timeRequired : null;
      let isCompleted = opts && 'isCompleted' in opts ? opts.isCompleted : false;
      return new main.Achievement.new({name: name, timeRequired: timeRequired, isCompleted: isCompleted});
    }
  };
  (main.Achievement.new = function(opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    let timeRequired = opts && 'timeRequired' in opts ? opts.timeRequired : null;
    let isCompleted = opts && 'isCompleted' in opts ? opts.isCompleted : false;
    this[name$] = name;
    this[timeRequired$] = timeRequired;
    this[isCompleted$] = isCompleted;
    ;
  }).prototype = main.Achievement.prototype;
  dart.addTypeTests(main.Achievement);
  dart.addTypeCaches(main.Achievement);
  dart.setLibraryUri(main.Achievement, I[0]);
  dart.setFieldSignature(main.Achievement, () => ({
    __proto__: dart.getFields(main.Achievement.__proto__),
    name: dart.finalFieldType(core.String),
    timeRequired: dart.finalFieldType(core.Duration),
    isCompleted: dart.fieldType(core.bool)
  }));
  var setTheme$0 = dart.privateName(main, "SettingsScreen.setTheme");
  main.SettingsScreen = class SettingsScreen extends framework.StatelessWidget {
    get setTheme() {
      return this[setTheme$0];
    }
    set setTheme(value) {
      super.setTheme = value;
    }
    static ['_#new#tearOff'](opts) {
      let setTheme = opts && 'setTheme' in opts ? opts.setTheme : null;
      return new main.SettingsScreen.new({setTheme: setTheme});
    }
    build(context) {
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: new text.Text.new("Settings"), leading: new icon_button.IconButton.new({icon: new image.Image.asset("assets/back_arrow.png"), onPressed: dart.fn(() => {
              navigator.Navigator.pop(T.ObjectN(), context);
            }, T.VoidTovoid())})}), body: new basic.Center.new({child: new basic.Column.new({mainAxisAlignment: flex.MainAxisAlignment.center, children: T.JSArrayOfWidget().of([new $switch.Switch.new({value: theme.Theme.of(context).brightness === ui.Brightness.dark, onChanged: dart.fn(value => {
                  let t0;
                  t0 = value;
                  this.setTheme(t0);
                }, T.boolTovoid())}), new text.Text.new("Dark Mode")])})})});
    }
  };
  (main.SettingsScreen.new = function(opts) {
    let setTheme = opts && 'setTheme' in opts ? opts.setTheme : null;
    this[setTheme$0] = setTheme;
    main.SettingsScreen.__proto__.new.call(this);
    ;
  }).prototype = main.SettingsScreen.prototype;
  dart.addTypeTests(main.SettingsScreen);
  dart.addTypeCaches(main.SettingsScreen);
  dart.setMethodSignature(main.SettingsScreen, () => ({
    __proto__: dart.getMethods(main.SettingsScreen.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main.SettingsScreen, I[0]);
  dart.setFieldSignature(main.SettingsScreen, () => ({
    __proto__: dart.getFields(main.SettingsScreen.__proto__),
    setTheme: dart.finalFieldType(dart.fnType(dart.dynamic, [core.bool]))
  }));
  main.SavingScreen = class SavingScreen extends framework.StatefulWidget {
    createState() {
      return new main._SavingScreenState.new();
    }
    static ['_#new#tearOff']() {
      return new main.SavingScreen.new();
    }
  };
  (main.SavingScreen.new = function() {
    main.SavingScreen.__proto__.new.call(this);
    ;
  }).prototype = main.SavingScreen.prototype;
  dart.addTypeTests(main.SavingScreen);
  dart.addTypeCaches(main.SavingScreen);
  dart.setMethodSignature(main.SavingScreen, () => ({
    __proto__: dart.getMethods(main.SavingScreen.__proto__),
    createState: dart.fnType(main._SavingScreenState, [])
  }));
  dart.setLibraryUri(main.SavingScreen, I[0]);
  var _cigarettesController = dart.privateName(main, "_cigarettesController");
  var _packPriceController = dart.privateName(main, "_packPriceController");
  var _dailyCigarettes = dart.privateName(main, "_dailyCigarettes");
  var _packPrice = dart.privateName(main, "_packPrice");
  var _dailyCost = dart.privateName(main, "_dailyCost");
  var _weeklyCost = dart.privateName(main, "_weeklyCost");
  var _monthlyCost = dart.privateName(main, "_monthlyCost");
  var _annualCost = dart.privateName(main, "_annualCost");
  var _fiveYearCost = dart.privateName(main, "_fiveYearCost");
  var _tenYearCost = dart.privateName(main, "_tenYearCost");
  var EdgeInsets_bottom = dart.privateName(edge_insets, "EdgeInsets.bottom");
  var EdgeInsets_right = dart.privateName(edge_insets, "EdgeInsets.right");
  var EdgeInsets_top = dart.privateName(edge_insets, "EdgeInsets.top");
  var EdgeInsets_left = dart.privateName(edge_insets, "EdgeInsets.left");
  var _updateCost = dart.privateName(main, "_updateCost");
  main._SavingScreenState = class _SavingScreenState extends framework.State$(main.SavingScreen) {
    build(context) {
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: new text.Text.new("Saving"), leading: new icon_button.IconButton.new({icon: new image.Image.asset("assets/back_arrow.png"), onPressed: dart.fn(() => {
              navigator.Navigator.pop(T.ObjectN(), context);
            }, T.VoidTovoid())})}), body: new basic.Padding.new({padding: C[2] || CT.C2, child: new basic.Column.new({crossAxisAlignment: flex.CrossAxisAlignment.stretch, children: T.JSArrayOfWidget().of([new text_field.TextField.new({controller: this[_cigarettesController], decoration: new input_decorator.InputDecoration.new({labelText: "Daily Cigarettes"}), keyboardType: text_input.TextInputType.number, onChanged: dart.fn(value => {
                  this.setState(dart.fn(() => {
                    let t0;
                    this[_dailyCigarettes] = (t0 = core.int.tryParse(value), t0 == null ? 0 : t0);
                    this[_updateCost]();
                  }, T.VoidTovoid()));
                }, T.StringTovoid())}), new text_field.TextField.new({controller: this[_packPriceController], decoration: new input_decorator.InputDecoration.new({labelText: "Pack Price ($)"}), keyboardType: new text_input.TextInputType.numberWithOptions({decimal: true}), onChanged: dart.fn(value => {
                  this.setState(dart.fn(() => {
                    let t0;
                    this[_packPrice] = (t0 = core.double.tryParse(value), t0 == null ? 0 : t0);
                    this[_updateCost]();
                  }, T.VoidTovoid()));
                }, T.StringTovoid())}), new basic.SizedBox.new({height: 20}), new text.Text.new("Daily Cost: $" + this[_dailyCost][$toStringAsFixed](2)), new text.Text.new("Weekly Cost: $" + this[_weeklyCost][$toStringAsFixed](2)), new text.Text.new("Monthly Cost: $" + this[_monthlyCost][$toStringAsFixed](2)), new text.Text.new("Annual Cost: $" + this[_annualCost][$toStringAsFixed](2)), new text.Text.new("5-Year Cost: $" + this[_fiveYearCost][$toStringAsFixed](2)), new text.Text.new("10-Year Cost: $" + this[_tenYearCost][$toStringAsFixed](2))])})})});
    }
    [_updateCost]() {
      this[_dailyCost] = this[_dailyCigarettes] * this[_packPrice];
      this[_weeklyCost] = this[_dailyCost] * 7;
      this[_monthlyCost] = this[_dailyCost] * 30;
      this[_annualCost] = this[_dailyCost] * 365;
      this[_fiveYearCost] = this[_dailyCost] * 365 * 5;
      this[_tenYearCost] = this[_dailyCost] * 365 * 10;
    }
    static ['_#new#tearOff']() {
      return new main._SavingScreenState.new();
    }
  };
  (main._SavingScreenState.new = function() {
    this[_cigarettesController] = new editable_text.TextEditingController.new();
    this[_packPriceController] = new editable_text.TextEditingController.new();
    this[_dailyCigarettes] = 0;
    this[_packPrice] = 0;
    this[_dailyCost] = 0;
    this[_weeklyCost] = 0;
    this[_monthlyCost] = 0;
    this[_annualCost] = 0;
    this[_fiveYearCost] = 0;
    this[_tenYearCost] = 0;
    main._SavingScreenState.__proto__.new.call(this);
    ;
  }).prototype = main._SavingScreenState.prototype;
  dart.addTypeTests(main._SavingScreenState);
  dart.addTypeCaches(main._SavingScreenState);
  dart.setMethodSignature(main._SavingScreenState, () => ({
    __proto__: dart.getMethods(main._SavingScreenState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    [_updateCost]: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(main._SavingScreenState, I[0]);
  dart.setFieldSignature(main._SavingScreenState, () => ({
    __proto__: dart.getFields(main._SavingScreenState.__proto__),
    [_cigarettesController]: dart.finalFieldType(editable_text.TextEditingController),
    [_packPriceController]: dart.finalFieldType(editable_text.TextEditingController),
    [_dailyCigarettes]: dart.fieldType(core.int),
    [_packPrice]: dart.fieldType(core.double),
    [_dailyCost]: dart.fieldType(core.double),
    [_weeklyCost]: dart.fieldType(core.double),
    [_monthlyCost]: dart.fieldType(core.double),
    [_annualCost]: dart.fieldType(core.double),
    [_fiveYearCost]: dart.fieldType(core.double),
    [_tenYearCost]: dart.fieldType(core.double)
  }));
  main.DonationScreen = class DonationScreen extends framework.StatelessWidget {
    build(context) {
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: new text.Text.new("Donation"), leading: new icon_button.IconButton.new({icon: new image.Image.asset("assets/back_arrow.png"), onPressed: dart.fn(() => {
              navigator.Navigator.pop(T.ObjectN(), context);
            }, T.VoidTovoid())})}), body: new basic.Center.new({child: new basic.Column.new({mainAxisAlignment: flex.MainAxisAlignment.center, children: T.JSArrayOfWidget().of([new text.Text.new("Support the Cause", {style: new text_style.TextStyle.new({fontSize: 24})}), new basic.SizedBox.new({height: 20}), new elevated_button.ElevatedButton.new({onPressed: dart.fn(() => {
                }, T.VoidTovoid()), child: new basic.Column.new({children: T.JSArrayOfWidget().of([new text.Text.new("Join Charities fight against Smoking"), new text.Text.new("https://truthinitiative.org/donate")])})}), new basic.SizedBox.new({height: 20}), new elevated_button.ElevatedButton.new({onPressed: dart.fn(() => {
                }, T.VoidTovoid()), child: new basic.Column.new({children: T.JSArrayOfWidget().of([new text.Text.new("Join Charities fight against Alcohol"), new text.Text.new("https://alcoholchange.org.uk/get-involved/donate/donate-now")])})})])})})});
    }
    static ['_#new#tearOff']() {
      return new main.DonationScreen.new();
    }
  };
  (main.DonationScreen.new = function() {
    main.DonationScreen.__proto__.new.call(this);
    ;
  }).prototype = main.DonationScreen.prototype;
  dart.addTypeTests(main.DonationScreen);
  dart.addTypeCaches(main.DonationScreen);
  dart.setMethodSignature(main.DonationScreen, () => ({
    __proto__: dart.getMethods(main.DonationScreen.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main.DonationScreen, I[0]);
  main.ProfileScreen = class ProfileScreen extends framework.StatefulWidget {
    createState() {
      return new main._ProfileScreenState.new();
    }
    static ['_#new#tearOff']() {
      return new main.ProfileScreen.new();
    }
  };
  (main.ProfileScreen.new = function() {
    main.ProfileScreen.__proto__.new.call(this);
    ;
  }).prototype = main.ProfileScreen.prototype;
  dart.addTypeTests(main.ProfileScreen);
  dart.addTypeCaches(main.ProfileScreen);
  dart.setMethodSignature(main.ProfileScreen, () => ({
    __proto__: dart.getMethods(main.ProfileScreen.__proto__),
    createState: dart.fnType(main._ProfileScreenState, [])
  }));
  dart.setLibraryUri(main.ProfileScreen, I[0]);
  var _nameController = dart.privateName(main, "_nameController");
  var _surnameController = dart.privateName(main, "_surnameController");
  var _ageController = dart.privateName(main, "_ageController");
  var _age = dart.privateName(main, "_age");
  var _loadProfileData = dart.privateName(main, "_loadProfileData");
  var _saveProfileData = dart.privateName(main, "_saveProfileData");
  main._ProfileScreenState = class _ProfileScreenState extends framework.State$(main.ProfileScreen) {
    initState() {
      super.initState();
      this[_loadProfileData]();
    }
    build(context) {
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: new text.Text.new("Profile"), leading: new icon_button.IconButton.new({icon: new image.Image.asset("assets/back_arrow.png"), onPressed: dart.fn(() => {
              navigator.Navigator.pop(T.ObjectN(), context);
            }, T.VoidTovoid())})}), body: new basic.Padding.new({padding: C[2] || CT.C2, child: new basic.Column.new({crossAxisAlignment: flex.CrossAxisAlignment.stretch, children: T.JSArrayOfWidget().of([new text_field.TextField.new({controller: this[_nameController], decoration: new input_decorator.InputDecoration.new({labelText: "Name"}), onChanged: dart.fn(value => this[_name] = value, T.StringTovoid())}), new text_field.TextField.new({controller: this[_surnameController], decoration: new input_decorator.InputDecoration.new({labelText: "Surname"}), onChanged: dart.fn(value => this[_surname] = value, T.StringTovoid())}), new text_field.TextField.new({controller: this[_ageController], decoration: new input_decorator.InputDecoration.new({labelText: "Age"}), keyboardType: text_input.TextInputType.number, onChanged: dart.fn(value => {
                  let t0;
                  return this[_age] = (t0 = core.int.tryParse(value), t0 == null ? 0 : t0);
                }, T.StringTovoid())}), new basic.SizedBox.new({height: 20}), new elevated_button.ElevatedButton.new({onPressed: dart.bind(this, _saveProfileData), child: new text.Text.new("Save")})])})})});
    }
    [_loadProfileData]() {
      this.setState(dart.fn(() => {
        this[_nameController].text = this[_name];
        this[_surnameController].text = this[_surname];
        this[_ageController].text = this[_age][$toString]();
      }, T.VoidTovoid()));
    }
    [_saveProfileData]() {
      this.setState(dart.fn(() => {
        let t0;
        this[_name] = this[_nameController].text;
        this[_surname] = this[_surnameController].text;
        this[_age] = (t0 = core.int.tryParse(this[_ageController].text), t0 == null ? 0 : t0);
      }, T.VoidTovoid()));
      scaffold.ScaffoldMessenger.of(this.context).showSnackBar(new snack_bar.SnackBar.new({content: new text.Text.new("Profile saved")}));
    }
    static ['_#new#tearOff']() {
      return new main._ProfileScreenState.new();
    }
  };
  (main._ProfileScreenState.new = function() {
    this[_nameController] = new editable_text.TextEditingController.new();
    this[_surnameController] = new editable_text.TextEditingController.new();
    this[_ageController] = new editable_text.TextEditingController.new();
    this[_name] = "";
    this[_surname] = "";
    this[_age] = 0;
    main._ProfileScreenState.__proto__.new.call(this);
    ;
  }).prototype = main._ProfileScreenState.prototype;
  dart.addTypeTests(main._ProfileScreenState);
  dart.addTypeCaches(main._ProfileScreenState);
  dart.setMethodSignature(main._ProfileScreenState, () => ({
    __proto__: dart.getMethods(main._ProfileScreenState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    [_loadProfileData]: dart.fnType(dart.void, []),
    [_saveProfileData]: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(main._ProfileScreenState, I[0]);
  dart.setFieldSignature(main._ProfileScreenState, () => ({
    __proto__: dart.getFields(main._ProfileScreenState.__proto__),
    [_nameController]: dart.finalFieldType(editable_text.TextEditingController),
    [_surnameController]: dart.finalFieldType(editable_text.TextEditingController),
    [_ageController]: dart.finalFieldType(editable_text.TextEditingController),
    [_name]: dart.fieldType(core.String),
    [_surname]: dart.fieldType(core.String),
    [_age]: dart.fieldType(core.int)
  }));
  main.InfoScreen = class InfoScreen extends framework.StatelessWidget {
    build(context) {
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: new text.Text.new("Saving"), leading: new icon_button.IconButton.new({icon: new image.Image.asset("assets/back_arrow.png"), onPressed: dart.fn(() => {
              navigator.Navigator.pop(T.ObjectN(), context);
            }, T.VoidTovoid())})}), body: new main.InfoContent.new()});
    }
    static ['_#new#tearOff']() {
      return new main.InfoScreen.new();
    }
  };
  (main.InfoScreen.new = function() {
    main.InfoScreen.__proto__.new.call(this);
    ;
  }).prototype = main.InfoScreen.prototype;
  dart.addTypeTests(main.InfoScreen);
  dart.addTypeCaches(main.InfoScreen);
  dart.setMethodSignature(main.InfoScreen, () => ({
    __proto__: dart.getMethods(main.InfoScreen.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main.InfoScreen, I[0]);
  main.InfoContent = class InfoContent extends framework.StatefulWidget {
    createState() {
      return new main._InfoContentState.new();
    }
    static ['_#new#tearOff']() {
      return new main.InfoContent.new();
    }
  };
  (main.InfoContent.new = function() {
    main.InfoContent.__proto__.new.call(this);
    ;
  }).prototype = main.InfoContent.prototype;
  dart.addTypeTests(main.InfoContent);
  dart.addTypeCaches(main.InfoContent);
  dart.setMethodSignature(main.InfoContent, () => ({
    __proto__: dart.getMethods(main.InfoContent.__proto__),
    createState: dart.fnType(main._InfoContentState, [])
  }));
  dart.setLibraryUri(main.InfoContent, I[0]);
  var _expanded = dart.privateName(main, "_expanded");
  main._InfoContentState = class _InfoContentState extends framework.State$(main.InfoContent) {
    build(context) {
      return new expansion_tile.ExpansionTile.new({title: new text.Text.new("What are the Health Problems Caused by Tobacco Addiction?"), trailing: new image.Image.asset("assets/down.png", {width: 24, height: 24}), onExpansionChanged: dart.fn(value => {
          this.setState(dart.fn(() => {
            this[_expanded] = value;
          }, T.VoidTovoid()));
        }, T.boolTovoid()), children: (() => {
          let t0 = T.JSArrayOfWidget().of([]);
          if (this[_expanded]) t0.push(new basic.Column.new({crossAxisAlignment: flex.CrossAxisAlignment.start, children: T.JSArrayOfWidget().of([new text.Text.new("1-Types of cancer (lung, stomach, skin, cervix, etc.):\n" + "2-Heart and vascular diseases\n" + "3-Diabetes\n" + "4-Respiratory diseases\n" + "5-Gastric diseases such as gastritis, ulcer\n" + "6-Tooth and gum diseases\n" + "7-Premature birth, miscarriage, developmental disorders in the child, cessation of milk", {style: new text_style.TextStyle.new({fontSize: 16})}), new basic.SizedBox.new({height: 10}), new basic.Center.new({child: new image.Image.asset("assets/sigara.png", {width: 300, height: 300})})])}));
          return t0;
        })(), initiallyExpanded: this[_expanded]});
    }
    static ['_#new#tearOff']() {
      return new main._InfoContentState.new();
    }
  };
  (main._InfoContentState.new = function() {
    this[_expanded] = false;
    main._InfoContentState.__proto__.new.call(this);
    ;
  }).prototype = main._InfoContentState.prototype;
  dart.addTypeTests(main._InfoContentState);
  dart.addTypeCaches(main._InfoContentState);
  dart.setMethodSignature(main._InfoContentState, () => ({
    __proto__: dart.getMethods(main._InfoContentState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main._InfoContentState, I[0]);
  dart.setFieldSignature(main._InfoContentState, () => ({
    __proto__: dart.getFields(main._InfoContentState.__proto__),
    [_expanded]: dart.fieldType(core.bool)
  }));
  main.main = function main$0() {
    binding.runApp(new main.MyApp.new());
  };
  web_plugin_registrant.registerPlugins = function registerPlugins(pluginRegistrar = null) {
    let t1;
    let registrar = (t1 = pluginRegistrar, t1 == null ? plugin_registry.webPluginRegistrar : t1);
    url_launcher_web.UrlLauncherPlugin.registerWith(registrar);
    registrar.registerMessageHandler();
  };
  var _isSafari = dart.privateName(url_launcher_web, "_isSafari");
  var _window = dart.privateName(url_launcher_web, "_window");
  plugin_platform_interface.PlatformInterface = class PlatformInterface extends core.Object {
    static verify(instance, token) {
      plugin_platform_interface.PlatformInterface._verify(instance, token, {preventConstObject: true});
    }
    static verifyToken(instance, token) {
      plugin_platform_interface.PlatformInterface._verify(instance, token, {preventConstObject: false});
    }
    static _verify(instance, token, opts) {
      let preventConstObject = opts && 'preventConstObject' in opts ? opts.preventConstObject : null;
      if (plugin_platform_interface.MockPlatformInterfaceMixin.is(instance)) {
        let assertionsEnabled = false;
        if (!dart.fn(() => {
          assertionsEnabled = true;
          return true;
        }, T.VoidTobool())()) dart.assertFailed(null, I[1], 92, 14, "() {\n        assertionsEnabled = true;\n        return true;\n      }()");
        if (!assertionsEnabled) {
          dart.throw(new core.AssertionError.new("`MockPlatformInterfaceMixin` is not intended for use in release builds."));
        }
        return;
      }
      if (preventConstObject && plugin_platform_interface.PlatformInterface._instanceTokens._get(instance) === (C[4] || CT.C4)) {
        dart.throw(new core.AssertionError.new("`const Object()` cannot be used as the token."));
      }
      if (token !== plugin_platform_interface.PlatformInterface._instanceTokens._get(instance)) {
        dart.throw(new core.AssertionError.new("Platform interfaces must not be implemented with `implements`"));
      }
    }
  };
  (plugin_platform_interface.PlatformInterface.new = function(opts) {
    let token = opts && 'token' in opts ? opts.token : null;
    plugin_platform_interface.PlatformInterface._instanceTokens._set(this, token);
  }).prototype = plugin_platform_interface.PlatformInterface.prototype;
  dart.addTypeTests(plugin_platform_interface.PlatformInterface);
  dart.addTypeCaches(plugin_platform_interface.PlatformInterface);
  dart.setStaticMethodSignature(plugin_platform_interface.PlatformInterface, () => ['verify', 'verifyToken', '_verify']);
  dart.setLibraryUri(plugin_platform_interface.PlatformInterface, I[2]);
  dart.setStaticFieldSignature(plugin_platform_interface.PlatformInterface, () => ['_instanceTokens']);
  dart.defineLazy(plugin_platform_interface.PlatformInterface, {
    /*plugin_platform_interface.PlatformInterface._instanceTokens*/get _instanceTokens() {
      return new (T.ExpandoOfObject()).new();
    }
  }, false);
  url_launcher_platform.UrlLauncherPlatform = class UrlLauncherPlatform extends plugin_platform_interface.PlatformInterface {
    static get instance() {
      return url_launcher_platform.UrlLauncherPlatform._instance;
    }
    static set instance(instance) {
      plugin_platform_interface.PlatformInterface.verify(instance, url_launcher_platform.UrlLauncherPlatform._token);
      url_launcher_platform.UrlLauncherPlatform._instance = instance;
    }
    canLaunch(url) {
      dart.throw(new core.UnimplementedError.new("canLaunch() has not been implemented."));
    }
    launch(url, opts) {
      let useSafariVC = opts && 'useSafariVC' in opts ? opts.useSafariVC : null;
      let useWebView = opts && 'useWebView' in opts ? opts.useWebView : null;
      let enableJavaScript = opts && 'enableJavaScript' in opts ? opts.enableJavaScript : null;
      let enableDomStorage = opts && 'enableDomStorage' in opts ? opts.enableDomStorage : null;
      let universalLinksOnly = opts && 'universalLinksOnly' in opts ? opts.universalLinksOnly : null;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let webOnlyWindowName = opts && 'webOnlyWindowName' in opts ? opts.webOnlyWindowName : null;
      dart.throw(new core.UnimplementedError.new("launch() has not been implemented."));
    }
    launchUrl(url, options) {
      let isWebURL = url[$startsWith]("http:") || url[$startsWith]("https:");
      let useWebView = options.mode === types.PreferredLaunchMode.inAppWebView || options.mode === types.PreferredLaunchMode.inAppBrowserView || isWebURL && options.mode === types.PreferredLaunchMode.platformDefault;
      return this.launch(url, {useSafariVC: useWebView, useWebView: useWebView, enableJavaScript: options.webViewConfiguration.enableJavaScript, enableDomStorage: options.webViewConfiguration.enableDomStorage, universalLinksOnly: options.mode === types.PreferredLaunchMode.externalNonBrowserApplication, headers: options.webViewConfiguration.headers, webOnlyWindowName: options.webOnlyWindowName});
    }
    closeWebView() {
      dart.throw(new core.UnimplementedError.new("closeWebView() has not been implemented."));
    }
    supportsMode(mode) {
      return T.FutureOfbool().value(mode === types.PreferredLaunchMode.platformDefault);
    }
    supportsCloseForMode(mode) {
      return T.FutureOfbool().value(mode === types.PreferredLaunchMode.inAppWebView);
    }
  };
  (url_launcher_platform.UrlLauncherPlatform.new = function() {
    url_launcher_platform.UrlLauncherPlatform.__proto__.new.call(this, {token: url_launcher_platform.UrlLauncherPlatform._token});
    ;
  }).prototype = url_launcher_platform.UrlLauncherPlatform.prototype;
  dart.addTypeTests(url_launcher_platform.UrlLauncherPlatform);
  dart.addTypeCaches(url_launcher_platform.UrlLauncherPlatform);
  dart.setMethodSignature(url_launcher_platform.UrlLauncherPlatform, () => ({
    __proto__: dart.getMethods(url_launcher_platform.UrlLauncherPlatform.__proto__),
    canLaunch: dart.fnType(async.Future$(core.bool), [core.String]),
    launch: dart.fnType(async.Future$(core.bool), [core.String], {webOnlyWindowName: dart.nullable(core.String)}, {enableDomStorage: core.bool, enableJavaScript: core.bool, headers: core.Map$(core.String, core.String), universalLinksOnly: core.bool, useSafariVC: core.bool, useWebView: core.bool}),
    launchUrl: dart.fnType(async.Future$(core.bool), [core.String, types.LaunchOptions]),
    closeWebView: dart.fnType(async.Future$(dart.void), []),
    supportsMode: dart.fnType(async.Future$(core.bool), [types.PreferredLaunchMode]),
    supportsCloseForMode: dart.fnType(async.Future$(core.bool), [types.PreferredLaunchMode])
  }));
  dart.setStaticGetterSignature(url_launcher_platform.UrlLauncherPlatform, () => ['instance']);
  dart.setStaticSetterSignature(url_launcher_platform.UrlLauncherPlatform, () => ['instance']);
  dart.setLibraryUri(url_launcher_platform.UrlLauncherPlatform, I[3]);
  dart.setStaticFieldSignature(url_launcher_platform.UrlLauncherPlatform, () => ['_token', '_instance']);
  dart.defineLazy(url_launcher_platform.UrlLauncherPlatform, {
    /*url_launcher_platform.UrlLauncherPlatform._token*/get _token() {
      return new core.Object.new();
    },
    /*url_launcher_platform.UrlLauncherPlatform._instance*/get _instance() {
      return new method_channel_url_launcher.MethodChannelUrlLauncher.new();
    },
    set _instance(value) {}
  }, false);
  url_launcher_web.UrlLauncherPlugin = class UrlLauncherPlugin extends url_launcher_platform.UrlLauncherPlatform {
    static ['_#new#tearOff'](opts) {
      let debugWindow = opts && 'debugWindow' in opts ? opts.debugWindow : null;
      return new url_launcher_web.UrlLauncherPlugin.new({debugWindow: debugWindow});
    }
    static registerWith(registrar) {
      url_launcher_platform.UrlLauncherPlatform.instance = new url_launcher_web.UrlLauncherPlugin.new();
      ui.platformViewRegistry.registerViewFactory("__url_launcher::link", link$.linkViewFactory, {isVisible: false});
    }
    get linkDelegate() {
      return dart.fn(linkInfo => new link$.WebLinkDelegate.new(linkInfo), T.LinkInfoToWebLinkDelegate());
    }
    openNewWindow(url, opts) {
      let t1;
      let webOnlyWindowName = opts && 'webOnlyWindowName' in opts ? opts.webOnlyWindowName : null;
      let target = (t1 = webOnlyWindowName, t1 == null ? this[_isSafari] && url_launcher_web._isSafariTargetTopScheme(url) ? "_top" : "" : t1);
      return this[_window][$open](url, target);
    }
    canLaunch(url) {
      return T.FutureOfbool().value(url_launcher_web.UrlLauncherPlugin._supportedSchemes.contains(url_launcher_web._getUrlScheme(url)));
    }
    launch(url, opts) {
      let useSafariVC = opts && 'useSafariVC' in opts ? opts.useSafariVC : false;
      let useWebView = opts && 'useWebView' in opts ? opts.useWebView : false;
      let enableJavaScript = opts && 'enableJavaScript' in opts ? opts.enableJavaScript : false;
      let enableDomStorage = opts && 'enableDomStorage' in opts ? opts.enableDomStorage : false;
      let universalLinksOnly = opts && 'universalLinksOnly' in opts ? opts.universalLinksOnly : false;
      let headers = opts && 'headers' in opts ? opts.headers : C[3] || CT.C3;
      let webOnlyWindowName = opts && 'webOnlyWindowName' in opts ? opts.webOnlyWindowName : null;
      return async.async(core.bool, (function* launch() {
        this.openNewWindow(url, {webOnlyWindowName: webOnlyWindowName});
        return true;
      }).bind(this));
    }
  };
  (url_launcher_web.UrlLauncherPlugin.new = function(opts) {
    let t1;
    let debugWindow = opts && 'debugWindow' in opts ? opts.debugWindow : null;
    this[_isSafari] = false;
    this[_window] = (t1 = debugWindow, t1 == null ? html.window : t1);
    url_launcher_web.UrlLauncherPlugin.__proto__.new.call(this);
    this[_isSafari] = url_launcher_web._navigatorIsSafari(this[_window][$navigator]);
  }).prototype = url_launcher_web.UrlLauncherPlugin.prototype;
  dart.addTypeTests(url_launcher_web.UrlLauncherPlugin);
  dart.addTypeCaches(url_launcher_web.UrlLauncherPlugin);
  dart.setMethodSignature(url_launcher_web.UrlLauncherPlugin, () => ({
    __proto__: dart.getMethods(url_launcher_web.UrlLauncherPlugin.__proto__),
    openNewWindow: dart.fnType(html.WindowBase, [core.String], {webOnlyWindowName: dart.nullable(core.String)}, {}),
    launch: dart.fnType(async.Future$(core.bool), [core.String], {enableDomStorage: core.bool, enableJavaScript: core.bool, headers: core.Map$(core.String, core.String), universalLinksOnly: core.bool, useSafariVC: core.bool, useWebView: core.bool, webOnlyWindowName: dart.nullable(core.String)}, {})
  }));
  dart.setStaticMethodSignature(url_launcher_web.UrlLauncherPlugin, () => ['registerWith']);
  dart.setGetterSignature(url_launcher_web.UrlLauncherPlugin, () => ({
    __proto__: dart.getGetters(url_launcher_web.UrlLauncherPlugin.__proto__),
    linkDelegate: dart.fnType(framework.Widget, [link.LinkInfo])
  }));
  dart.setLibraryUri(url_launcher_web.UrlLauncherPlugin, I[4]);
  dart.setFieldSignature(url_launcher_web.UrlLauncherPlugin, () => ({
    __proto__: dart.getFields(url_launcher_web.UrlLauncherPlugin.__proto__),
    [_window]: dart.finalFieldType(html.Window),
    [_isSafari]: dart.fieldType(core.bool)
  }));
  dart.setStaticFieldSignature(url_launcher_web.UrlLauncherPlugin, () => ['_supportedSchemes']);
  dart.defineLazy(url_launcher_web.UrlLauncherPlugin, {
    /*url_launcher_web.UrlLauncherPlugin._supportedSchemes*/get _supportedSchemes() {
      return T.LinkedHashSetOfString().from(["http", "https"]).union(url_launcher_web._safariTargetTopSchemes);
    }
  }, false);
  url_launcher_web._getUrlScheme = function _getUrlScheme(url) {
    let t1;
    t1 = core.Uri.tryParse(url);
    return t1 == null ? null : t1.scheme;
  };
  url_launcher_web._isSafariTargetTopScheme = function _isSafariTargetTopScheme(url) {
    return url_launcher_web._safariTargetTopSchemes.contains(url_launcher_web._getUrlScheme(url));
  };
  url_launcher_web._navigatorIsSafari = function _navigatorIsSafari(navigator) {
    return navigator[$userAgent][$contains]("Safari") && !navigator[$userAgent][$contains]("Chrome");
  };
  dart.defineLazy(url_launcher_web, {
    /*url_launcher_web._safariTargetTopSchemes*/get _safariTargetTopSchemes() {
      return C[5] || CT.C5;
    }
  }, false);
  var debugLabel$ = dart.privateName(link, "LinkTarget.debugLabel");
  link.LinkTarget = class LinkTarget extends core.Object {
    get debugLabel() {
      return this[debugLabel$];
    }
    set debugLabel(value) {
      super.debugLabel = value;
    }
    static ['_#_#tearOff'](opts) {
      let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
      return new link.LinkTarget.__({debugLabel: debugLabel});
    }
  };
  (link.LinkTarget.__ = function(opts) {
    let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
    this[debugLabel$] = debugLabel;
    ;
  }).prototype = link.LinkTarget.prototype;
  dart.addTypeTests(link.LinkTarget);
  dart.addTypeCaches(link.LinkTarget);
  dart.setLibraryUri(link.LinkTarget, I[5]);
  dart.setFieldSignature(link.LinkTarget, () => ({
    __proto__: dart.getFields(link.LinkTarget.__proto__),
    debugLabel: dart.finalFieldType(core.String)
  }));
  dart.setStaticFieldSignature(link.LinkTarget, () => ['defaultTarget', 'self', 'blank']);
  dart.defineLazy(link.LinkTarget, {
    /*link.LinkTarget.defaultTarget*/get defaultTarget() {
      return C[6] || CT.C6;
    },
    /*link.LinkTarget.self*/get self() {
      return C[7] || CT.C7;
    },
    /*link.LinkTarget.blank*/get blank() {
      return C[8] || CT.C8;
    }
  }, false);
  link.LinkInfo = class LinkInfo extends core.Object {};
  (link.LinkInfo.new = function() {
    ;
  }).prototype = link.LinkInfo.prototype;
  dart.addTypeTests(link.LinkInfo);
  dart.addTypeCaches(link.LinkInfo);
  dart.setLibraryUri(link.LinkInfo, I[5]);
  link.pushRouteNameToFramework = function pushRouteNameToFramework(_, routeName) {
    let completer = T.CompleterOfByteData().new();
    system_navigator.SystemNavigator.routeInformationUpdated({location: routeName});
    ui.channelBuffers.push("flutter/navigation", link._codec.encodeMethodCall(new message_codec.MethodCall.new("pushRouteInformation", new _js_helper.LinkedMap.from(["location", routeName, "state", null]))), T.FutureOrNOfByteDataTovoid().as(dart.bind(completer, 'complete')));
    return completer.future;
  };
  dart.defineLazy(link, {
    /*link._codec*/get _codec() {
      return C[9] || CT.C9;
    }
  }, false);
  var link$0 = dart.privateName(link$, "WebLinkDelegate.link");
  link$.WebLinkDelegate = class WebLinkDelegate extends framework.StatefulWidget {
    get link() {
      return this[link$0];
    }
    set link(value) {
      super.link = value;
    }
    static ['_#new#tearOff'](link, opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      return new link$.WebLinkDelegate.new(link, {key: key});
    }
    createState() {
      return new link$.WebLinkDelegateState.new();
    }
  };
  (link$.WebLinkDelegate.new = function(link, opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    this[link$0] = link;
    link$.WebLinkDelegate.__proto__.new.call(this, {key: key});
    ;
  }).prototype = link$.WebLinkDelegate.prototype;
  dart.addTypeTests(link$.WebLinkDelegate);
  dart.addTypeCaches(link$.WebLinkDelegate);
  dart.setMethodSignature(link$.WebLinkDelegate, () => ({
    __proto__: dart.getMethods(link$.WebLinkDelegate.__proto__),
    createState: dart.fnType(link$.WebLinkDelegateState, [])
  }));
  dart.setLibraryUri(link$.WebLinkDelegate, I[6]);
  dart.setFieldSignature(link$.WebLinkDelegate, () => ({
    __proto__: dart.getFields(link$.WebLinkDelegate.__proto__),
    link: dart.finalFieldType(link.LinkInfo)
  }));
  var __WebLinkDelegateState__controller = dart.privateName(link$, "_#WebLinkDelegateState#_controller");
  var _controller = dart.privateName(link$, "_controller");
  var _followLink = dart.privateName(link$, "_followLink");
  link$.WebLinkDelegateState = class WebLinkDelegateState extends framework.State$(link$.WebLinkDelegate) {
    get [_controller]() {
      let t1;
      t1 = this[__WebLinkDelegateState__controller];
      return t1 == null ? dart.throw(new _internal.LateError.fieldNI("_controller")) : t1;
    }
    set [_controller](_controller$35param) {
      this[__WebLinkDelegateState__controller] = _controller$35param;
    }
    didUpdateWidget(oldWidget) {
      link$.WebLinkDelegate.as(oldWidget);
      super.didUpdateWidget(oldWidget);
      if (!dart.equals(this.widget.link.uri, oldWidget.link.uri)) {
        this[_controller].setUri(this.widget.link.uri);
      }
      if (!this.widget.link.target[$_equals](oldWidget.link.target)) {
        this[_controller].setTarget(this.widget.link.target);
      }
    }
    [_followLink]() {
      link$.LinkViewController.registerHitTest(this[_controller]);
      return T.FutureOfvoid().value();
    }
    build(context) {
      let t3, t2, t1;
      return new basic.Stack.new({fit: stack.StackFit.passthrough, children: T.JSArrayOfWidget().of([(t1 = this.widget.link, t2 = context, t3 = this.widget.link.isDisabled ? null : dart.bind(this, _followLink), t1.builder(t2, t3)), new basic.Positioned.fill({child: new platform_view.PlatformViewLink.new({viewType: "__url_launcher::link", onCreatePlatformView: dart.fn(params => {
                let t1;
                this[_controller] = link$.LinkViewController.fromParams(params);
                t1 = this[_controller];
                return (() => {
                  t1.setUri(this.widget.link.uri);
                  t1.setTarget(this.widget.link.target);
                  return t1;
                })();
              }, T.PlatformViewCreationParamsToLinkViewController()), surfaceFactory: dart.fn((context, controller) => new platform_view.PlatformViewSurface.new({controller: controller, gestureRecognizers: C[10] || CT.C10, hitTestBehavior: platform_view$.PlatformViewHitTestBehavior.transparent}), T.BuildContextAndPlatformViewControllerToPlatformViewSurface())})})])});
    }
    static ['_#new#tearOff']() {
      return new link$.WebLinkDelegateState.new();
    }
  };
  (link$.WebLinkDelegateState.new = function() {
    this[__WebLinkDelegateState__controller] = null;
    link$.WebLinkDelegateState.__proto__.new.call(this);
    ;
  }).prototype = link$.WebLinkDelegateState.prototype;
  dart.addTypeTests(link$.WebLinkDelegateState);
  dart.addTypeCaches(link$.WebLinkDelegateState);
  dart.setMethodSignature(link$.WebLinkDelegateState, () => ({
    __proto__: dart.getMethods(link$.WebLinkDelegateState.__proto__),
    [_followLink]: dart.fnType(async.Future$(dart.void), []),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setGetterSignature(link$.WebLinkDelegateState, () => ({
    __proto__: dart.getGetters(link$.WebLinkDelegateState.__proto__),
    [_controller]: link$.LinkViewController
  }));
  dart.setSetterSignature(link$.WebLinkDelegateState, () => ({
    __proto__: dart.getSetters(link$.WebLinkDelegateState.__proto__),
    [_controller]: link$.LinkViewController
  }));
  dart.setLibraryUri(link$.WebLinkDelegateState, I[6]);
  dart.setFieldSignature(link$.WebLinkDelegateState, () => ({
    __proto__: dart.getFields(link$.WebLinkDelegateState.__proto__),
    [__WebLinkDelegateState__controller]: dart.fieldType(dart.nullable(link$.LinkViewController))
  }));
  var viewId$ = dart.privateName(link$, "LinkViewController.viewId");
  var __LinkViewController__element = dart.privateName(link$, "_#LinkViewController#_element");
  var _uri = dart.privateName(link$, "_uri");
  var _initialize = dart.privateName(link$, "_initialize");
  var _element = dart.privateName(link$, "_element");
  var _onDomClick = dart.privateName(link$, "_onDomClick");
  var _getHtmlTarget = dart.privateName(link$, "_getHtmlTarget");
  link$.LinkViewController = class LinkViewController extends platform_views.PlatformViewController {
    get viewId() {
      return this[viewId$];
    }
    set viewId(value) {
      super.viewId = value;
    }
    static ['_#new#tearOff'](viewId) {
      return new link$.LinkViewController.new(viewId);
    }
    static fromParams(params) {
      let viewId = params.id;
      let controller = new link$.LinkViewController.new(viewId);
      controller[_initialize]().then(core.Null, dart.fn(_ => {
        let t2, t1;
        if (dart.equals(link$.LinkViewController._instances[$_get](viewId), controller)) {
          t1 = params;
          t2 = viewId;
          t1.onPlatformViewCreated(t2);
        }
      }, T.voidToNull()));
      return controller;
    }
    static ['_#fromParams#tearOff'](params) {
      return link$.LinkViewController.fromParams(params);
    }
    static _viewFactory(viewId) {
      return dart.nullCheck(link$.LinkViewController._instances[$_get](viewId))[_element];
    }
    static get _clickSubscription() {
      let t1;
      t1 = link$.LinkViewController['_#_clickSubscription'];
      return t1 == null ? dart.throw(new _internal.LateError.fieldNI("_clickSubscription")) : t1;
    }
    static set _clickSubscription(_clickSubscription$35param) {
      link$.LinkViewController['_#_clickSubscription'] = _clickSubscription$35param;
    }
    static _onGlobalClick(event) {
      let t1;
      let viewId = link$.getViewIdFromTarget(event);
      t1 = link$.LinkViewController._instances[$_get](viewId);
      t1 == null ? null : t1[_onDomClick](event);
      link$.LinkViewController.unregisterHitTest();
    }
    static registerHitTest(controller) {
      link$.LinkViewController._hitTestedViewId = controller.viewId;
    }
    static unregisterHitTest() {
      link$.LinkViewController._hitTestedViewId = null;
    }
    get [_element]() {
      let t1;
      t1 = this[__LinkViewController__element];
      return t1 == null ? dart.throw(new _internal.LateError.fieldNI("_element")) : t1;
    }
    set [_element](_element$35param) {
      this[__LinkViewController__element] = _element$35param;
    }
    [_initialize]() {
      return async.async(dart.void, (function* _initialize() {
        let t1;
        this[_element] = html.Element.tag("a");
        js_util._setPropertyUnchecked(core.int, this[_element], "__url_launcher::link::viewId", this.viewId);
        t1 = this[_element][$style];
        (() => {
          t1[$opacity] = "0";
          t1[$display] = "block";
          t1[$width] = "100%";
          t1[$height] = "100%";
          t1[$cursor] = "unset";
          return t1;
        })();
        this[_element][$setAttribute]("rel", "noreferrer noopener");
        let args = new (T.IdentityMapOfString$dynamic()).from(["id", this.viewId, "viewType", "__url_launcher::link"]);
        yield system_channels.SystemChannels.platform_views.invokeMethod(dart.void, "create", args);
      }).bind(this));
    }
    [_onDomClick](event) {
      let isHitTested = link$.LinkViewController._hitTestedViewId === this.viewId;
      if (!isHitTested) {
        event.preventDefault();
        return;
      }
      if (this[_uri] != null && dart.nullCheck(this[_uri]).hasScheme) {
        return;
      }
      event.preventDefault();
      let routeName = dart.toString(this[_uri]);
      link.pushRouteNameToFramework(null, routeName);
    }
    setUri(uri) {
      let t1, t1$;
      this[_uri] = uri;
      if (uri == null) {
        this[_element][$removeAttribute]("href");
      } else {
        let href = dart.toString(uri);
        if (!uri.hasScheme) {
          href = (t1$ = (t1 = url_strategy.urlStrategy, t1 == null ? null : t1.prepareExternalUrl(href)), t1$ == null ? href : t1$);
        }
        this[_element][$setAttribute]("href", href);
      }
    }
    setTarget(target) {
      this[_element][$setAttribute]("target", this[_getHtmlTarget](target));
    }
    [_getHtmlTarget](target) {
      switch (target) {
        case C[6] || CT.C6:
        case C[7] || CT.C7:
          {
            return "_self";
          }
        case C[8] || CT.C8:
          {
            return "_blank";
          }
      }
      return "_self";
    }
    clearFocus() {
      return async.async(dart.void, function* clearFocus() {
      });
    }
    dispatchPointerEvent(event) {
      return async.async(dart.void, function* dispatchPointerEvent() {
      });
    }
    dispose() {
      return async.async(dart.void, (function* dispose() {
        if (!dart.equals(link$.LinkViewController._instances[$_get](this.viewId), this)) dart.assertFailed(null, I[7], 269, 12, "_instances[viewId] == this");
        link$.LinkViewController._instances[$remove](this.viewId);
        if (link$.LinkViewController._instances[$isEmpty]) {
          yield link$.LinkViewController._clickSubscription.cancel();
        }
        yield system_channels.SystemChannels.platform_views.invokeMethod(dart.void, "dispose", this.viewId);
      }).bind(this));
    }
  };
  (link$.LinkViewController.new = function(viewId) {
    this[__LinkViewController__element] = null;
    this[_uri] = null;
    this[viewId$] = viewId;
    if (link$.LinkViewController._instances[$isEmpty]) {
      link$.LinkViewController._clickSubscription = html.window[$onClick].listen(C[11] || CT.C11);
    }
    link$.LinkViewController._instances[$_set](this.viewId, this);
  }).prototype = link$.LinkViewController.prototype;
  dart.addTypeTests(link$.LinkViewController);
  dart.addTypeCaches(link$.LinkViewController);
  dart.setMethodSignature(link$.LinkViewController, () => ({
    __proto__: dart.getMethods(link$.LinkViewController.__proto__),
    [_initialize]: dart.fnType(async.Future$(dart.void), []),
    [_onDomClick]: dart.fnType(dart.void, [html.MouseEvent]),
    setUri: dart.fnType(dart.void, [dart.nullable(core.Uri)]),
    setTarget: dart.fnType(dart.void, [link.LinkTarget]),
    [_getHtmlTarget]: dart.fnType(core.String, [link.LinkTarget]),
    clearFocus: dart.fnType(async.Future$(dart.void), []),
    dispatchPointerEvent: dart.fnType(async.Future$(dart.void), [events.PointerEvent]),
    dispose: dart.fnType(async.Future$(dart.void), [])
  }));
  dart.setStaticMethodSignature(link$.LinkViewController, () => ['fromParams', '_viewFactory', '_onGlobalClick', 'registerHitTest', 'unregisterHitTest']);
  dart.setGetterSignature(link$.LinkViewController, () => ({
    __proto__: dart.getGetters(link$.LinkViewController.__proto__),
    [_element]: html.Element
  }));
  dart.setSetterSignature(link$.LinkViewController, () => ({
    __proto__: dart.getSetters(link$.LinkViewController.__proto__),
    [_element]: html.Element
  }));
  dart.setStaticGetterSignature(link$.LinkViewController, () => ['_clickSubscription']);
  dart.setStaticSetterSignature(link$.LinkViewController, () => ['_clickSubscription']);
  dart.setLibraryUri(link$.LinkViewController, I[6]);
  dart.setFieldSignature(link$.LinkViewController, () => ({
    __proto__: dart.getFields(link$.LinkViewController.__proto__),
    viewId: dart.finalFieldType(core.int),
    [__LinkViewController__element]: dart.fieldType(dart.nullable(html.Element)),
    [_uri]: dart.fieldType(dart.nullable(core.Uri))
  }));
  dart.setStaticFieldSignature(link$.LinkViewController, () => ['_instances', '_hitTestedViewId', '_#_clickSubscription']);
  dart.defineLazy(link$.LinkViewController, {
    /*link$.LinkViewController._instances*/get _instances() {
      return new (T.IdentityMapOfint$LinkViewController()).new();
    },
    /*link$.LinkViewController._hitTestedViewId*/get _hitTestedViewId() {
      return null;
    },
    set _hitTestedViewId(value) {},
    /*link$.LinkViewController['_#_clickSubscription']*/get ['_#_clickSubscription']() {
      return null;
    },
    set ['_#_clickSubscription'](value) {}
  }, false);
  link$.getViewIdFromTarget = function getViewIdFromTarget(event) {
    let linkElement = link$.getLinkElementFromTarget(event);
    if (linkElement != null) {
      return js_util.getProperty(T.intN(), linkElement, "__url_launcher::link::viewId");
    }
    return null;
  };
  link$.getLinkElementFromTarget = function getLinkElementFromTarget(event) {
    let target = event[$target];
    if (target != null && html.Element.is(target)) {
      if (link$.isLinkElement(target)) {
        return target;
      }
      if (target[$shadowRoot] != null) {
        let child = dart.nullCheck(target[$shadowRoot]).lastChild;
        if (child != null && html.Element.is(child) && link$.isLinkElement(child)) {
          return child;
        }
      }
    }
    return null;
  };
  link$.isLinkElement = function isLinkElement(element) {
    return element != null && element[$tagName] === "A" && js_util.hasProperty(element, "__url_launcher::link::viewId");
  };
  dart.copyProperties(link$, {
    get linkViewFactory() {
      return C[12] || CT.C12;
    }
  });
  dart.defineLazy(link$, {
    /*link$.linkViewType*/get linkViewType() {
      return "__url_launcher::link";
    },
    /*link$.linkViewIdProperty*/get linkViewIdProperty() {
      return "__url_launcher::link::viewId";
    }
  }, false);
  var _name$ = dart.privateName(core, "_name");
  var _enumToString = dart.privateName(core, "_enumToString");
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  types.PreferredLaunchMode = class PreferredLaunchMode extends core._Enum {
    [_enumToString]() {
      return "PreferredLaunchMode." + this[_name$];
    }
  };
  (types.PreferredLaunchMode.new = function(index, name) {
    types.PreferredLaunchMode.__proto__.new.call(this, index, name);
    ;
  }).prototype = types.PreferredLaunchMode.prototype;
  dart.addTypeTests(types.PreferredLaunchMode);
  dart.addTypeCaches(types.PreferredLaunchMode);
  dart.setMethodSignature(types.PreferredLaunchMode, () => ({
    __proto__: dart.getMethods(types.PreferredLaunchMode.__proto__),
    [_enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(types.PreferredLaunchMode, I[8]);
  dart.setStaticFieldSignature(types.PreferredLaunchMode, () => ['values', 'platformDefault', 'inAppWebView', 'inAppBrowserView', 'externalApplication', 'externalNonBrowserApplication']);
  dart.defineLazy(types.PreferredLaunchMode, {
    /*types.PreferredLaunchMode.values*/get values() {
      return C[13] || CT.C13;
    },
    /*types.PreferredLaunchMode.platformDefault*/get platformDefault() {
      return C[14] || CT.C14;
    },
    /*types.PreferredLaunchMode.inAppWebView*/get inAppWebView() {
      return C[15] || CT.C15;
    },
    /*types.PreferredLaunchMode.inAppBrowserView*/get inAppBrowserView() {
      return C[16] || CT.C16;
    },
    /*types.PreferredLaunchMode.externalApplication*/get externalApplication() {
      return C[17] || CT.C17;
    },
    /*types.PreferredLaunchMode.externalNonBrowserApplication*/get externalNonBrowserApplication() {
      return C[18] || CT.C18;
    }
  }, false);
  var enableJavaScript$ = dart.privateName(types, "InAppWebViewConfiguration.enableJavaScript");
  var enableDomStorage$ = dart.privateName(types, "InAppWebViewConfiguration.enableDomStorage");
  var headers$ = dart.privateName(types, "InAppWebViewConfiguration.headers");
  types.InAppWebViewConfiguration = class InAppWebViewConfiguration extends core.Object {
    get enableJavaScript() {
      return this[enableJavaScript$];
    }
    set enableJavaScript(value) {
      super.enableJavaScript = value;
    }
    get enableDomStorage() {
      return this[enableDomStorage$];
    }
    set enableDomStorage(value) {
      super.enableDomStorage = value;
    }
    get headers() {
      return this[headers$];
    }
    set headers(value) {
      super.headers = value;
    }
    static ['_#new#tearOff'](opts) {
      let enableJavaScript = opts && 'enableJavaScript' in opts ? opts.enableJavaScript : true;
      let enableDomStorage = opts && 'enableDomStorage' in opts ? opts.enableDomStorage : true;
      let headers = opts && 'headers' in opts ? opts.headers : C[3] || CT.C3;
      return new types.InAppWebViewConfiguration.new({enableJavaScript: enableJavaScript, enableDomStorage: enableDomStorage, headers: headers});
    }
  };
  (types.InAppWebViewConfiguration.new = function(opts) {
    let enableJavaScript = opts && 'enableJavaScript' in opts ? opts.enableJavaScript : true;
    let enableDomStorage = opts && 'enableDomStorage' in opts ? opts.enableDomStorage : true;
    let headers = opts && 'headers' in opts ? opts.headers : C[3] || CT.C3;
    this[enableJavaScript$] = enableJavaScript;
    this[enableDomStorage$] = enableDomStorage;
    this[headers$] = headers;
    ;
  }).prototype = types.InAppWebViewConfiguration.prototype;
  dart.addTypeTests(types.InAppWebViewConfiguration);
  dart.addTypeCaches(types.InAppWebViewConfiguration);
  dart.setLibraryUri(types.InAppWebViewConfiguration, I[8]);
  dart.setFieldSignature(types.InAppWebViewConfiguration, () => ({
    __proto__: dart.getFields(types.InAppWebViewConfiguration.__proto__),
    enableJavaScript: dart.finalFieldType(core.bool),
    enableDomStorage: dart.finalFieldType(core.bool),
    headers: dart.finalFieldType(core.Map$(core.String, core.String))
  }));
  var mode$ = dart.privateName(types, "LaunchOptions.mode");
  var webViewConfiguration$ = dart.privateName(types, "LaunchOptions.webViewConfiguration");
  var webOnlyWindowName$ = dart.privateName(types, "LaunchOptions.webOnlyWindowName");
  types.LaunchOptions = class LaunchOptions extends core.Object {
    get mode() {
      return this[mode$];
    }
    set mode(value) {
      super.mode = value;
    }
    get webViewConfiguration() {
      return this[webViewConfiguration$];
    }
    set webViewConfiguration(value) {
      super.webViewConfiguration = value;
    }
    get webOnlyWindowName() {
      return this[webOnlyWindowName$];
    }
    set webOnlyWindowName(value) {
      super.webOnlyWindowName = value;
    }
    static ['_#new#tearOff'](opts) {
      let mode = opts && 'mode' in opts ? opts.mode : C[14] || CT.C14;
      let webViewConfiguration = opts && 'webViewConfiguration' in opts ? opts.webViewConfiguration : C[19] || CT.C19;
      let webOnlyWindowName = opts && 'webOnlyWindowName' in opts ? opts.webOnlyWindowName : null;
      return new types.LaunchOptions.new({mode: mode, webViewConfiguration: webViewConfiguration, webOnlyWindowName: webOnlyWindowName});
    }
  };
  (types.LaunchOptions.new = function(opts) {
    let mode = opts && 'mode' in opts ? opts.mode : C[14] || CT.C14;
    let webViewConfiguration = opts && 'webViewConfiguration' in opts ? opts.webViewConfiguration : C[19] || CT.C19;
    let webOnlyWindowName = opts && 'webOnlyWindowName' in opts ? opts.webOnlyWindowName : null;
    this[mode$] = mode;
    this[webViewConfiguration$] = webViewConfiguration;
    this[webOnlyWindowName$] = webOnlyWindowName;
    ;
  }).prototype = types.LaunchOptions.prototype;
  dart.addTypeTests(types.LaunchOptions);
  dart.addTypeCaches(types.LaunchOptions);
  dart.setLibraryUri(types.LaunchOptions, I[8]);
  dart.setFieldSignature(types.LaunchOptions, () => ({
    __proto__: dart.getFields(types.LaunchOptions.__proto__),
    mode: dart.finalFieldType(types.PreferredLaunchMode),
    webViewConfiguration: dart.finalFieldType(types.InAppWebViewConfiguration),
    webOnlyWindowName: dart.finalFieldType(dart.nullable(core.String))
  }));
  plugin_platform_interface.MockPlatformInterfaceMixin = class MockPlatformInterfaceMixin extends core.Object {};
  (plugin_platform_interface.MockPlatformInterfaceMixin.new = function() {
    ;
  }).prototype = plugin_platform_interface.MockPlatformInterfaceMixin.prototype;
  dart.addTypeTests(plugin_platform_interface.MockPlatformInterfaceMixin);
  dart.addTypeCaches(plugin_platform_interface.MockPlatformInterfaceMixin);
  plugin_platform_interface.MockPlatformInterfaceMixin[dart.implements] = () => [plugin_platform_interface.PlatformInterface];
  dart.setLibraryUri(plugin_platform_interface.MockPlatformInterfaceMixin, I[2]);
  var linkDelegate = dart.privateName(method_channel_url_launcher, "MethodChannelUrlLauncher.linkDelegate");
  method_channel_url_launcher.MethodChannelUrlLauncher = class MethodChannelUrlLauncher extends url_launcher_platform.UrlLauncherPlatform {
    get linkDelegate() {
      return this[linkDelegate];
    }
    set linkDelegate(value) {
      super.linkDelegate = value;
    }
    canLaunch(url) {
      return method_channel_url_launcher._channel.invokeMethod(core.bool, "canLaunch", new (T.IdentityMapOfString$Object()).from(["url", url])).then(core.bool, dart.fn(value => {
        let t3;
        t3 = value;
        return t3 == null ? false : t3;
      }, T.boolNTobool()));
    }
    closeWebView() {
      return method_channel_url_launcher._channel.invokeMethod(dart.void, "closeWebView");
    }
    launch(url, opts) {
      let useSafariVC = opts && 'useSafariVC' in opts ? opts.useSafariVC : null;
      let useWebView = opts && 'useWebView' in opts ? opts.useWebView : null;
      let enableJavaScript = opts && 'enableJavaScript' in opts ? opts.enableJavaScript : null;
      let enableDomStorage = opts && 'enableDomStorage' in opts ? opts.enableDomStorage : null;
      let universalLinksOnly = opts && 'universalLinksOnly' in opts ? opts.universalLinksOnly : null;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let webOnlyWindowName = opts && 'webOnlyWindowName' in opts ? opts.webOnlyWindowName : null;
      return method_channel_url_launcher._channel.invokeMethod(core.bool, "launch", new (T.IdentityMapOfString$Object()).from(["url", url, "useSafariVC", useSafariVC, "useWebView", useWebView, "enableJavaScript", enableJavaScript, "enableDomStorage", enableDomStorage, "universalLinksOnly", universalLinksOnly, "headers", headers])).then(core.bool, dart.fn(value => {
        let t3;
        t3 = value;
        return t3 == null ? false : t3;
      }, T.boolNTobool()));
    }
    static ['_#new#tearOff']() {
      return new method_channel_url_launcher.MethodChannelUrlLauncher.new();
    }
  };
  (method_channel_url_launcher.MethodChannelUrlLauncher.new = function() {
    this[linkDelegate] = null;
    method_channel_url_launcher.MethodChannelUrlLauncher.__proto__.new.call(this);
    ;
  }).prototype = method_channel_url_launcher.MethodChannelUrlLauncher.prototype;
  dart.addTypeTests(method_channel_url_launcher.MethodChannelUrlLauncher);
  dart.addTypeCaches(method_channel_url_launcher.MethodChannelUrlLauncher);
  dart.setLibraryUri(method_channel_url_launcher.MethodChannelUrlLauncher, I[9]);
  dart.setFieldSignature(method_channel_url_launcher.MethodChannelUrlLauncher, () => ({
    __proto__: dart.getFields(method_channel_url_launcher.MethodChannelUrlLauncher.__proto__),
    linkDelegate: dart.finalFieldType(dart.nullable(dart.fnType(framework.Widget, [link.LinkInfo])))
  }));
  var MethodChannel__binaryMessenger = dart.privateName(platform_channel, "MethodChannel._binaryMessenger");
  var StandardMethodCodec_messageCodec = dart.privateName(message_codecs, "StandardMethodCodec.messageCodec");
  var MethodChannel_codec = dart.privateName(platform_channel, "MethodChannel.codec");
  var MethodChannel_name = dart.privateName(platform_channel, "MethodChannel.name");
  dart.defineLazy(method_channel_url_launcher, {
    /*method_channel_url_launcher._channel*/get _channel() {
      return C[20] || CT.C20;
    }
  }, false);
  dart.trackLibraries("zapp_user_main", {
    "file:///zapp/project/.zapp_entry.dart": $46zapp_entry,
    "file:///zapp/project/lib/main.dart": main,
    "file:///zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart": web_plugin_registrant,
    "package:url_launcher_web/url_launcher_web.dart": url_launcher_web,
    "package:url_launcher_platform_interface/link.dart": link,
    "package:url_launcher_platform_interface/url_launcher_platform_interface.dart": url_launcher_platform_interface,
    "package:url_launcher_web/src/link.dart": link$,
    "package:url_launcher_web/src/shims/dart_ui.dart": dart_ui,
    "package:url_launcher_platform_interface/src/types.dart": types,
    "package:url_launcher_platform_interface/src/url_launcher_platform.dart": url_launcher_platform,
    "package:url_launcher_web/src/shims/dart_ui_real.dart": dart_ui_real,
    "package:plugin_platform_interface/plugin_platform_interface.dart": plugin_platform_interface,
    "package:url_launcher_platform_interface/method_channel_url_launcher.dart": method_channel_url_launcher
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["/zapp/project/.zapp_entry.dart","/zapp/project/lib/main.dart","/zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart","/zapp/pub/.pub_cache/hosted/pub.dev/plugin_platform_interface-2.1.6/lib/plugin_platform_interface.dart","/zapp/pub/.pub_cache/hosted/pub.dev/url_launcher_platform_interface-2.2.0/lib/src/url_launcher_platform.dart","/zapp/pub/.pub_cache/hosted/pub.dev/url_launcher_web-2.0.19/lib/url_launcher_web.dart","/zapp/pub/.pub_cache/hosted/pub.dev/url_launcher_platform_interface-2.2.0/lib/link.dart","/zapp/pub/.pub_cache/hosted/pub.dev/url_launcher_web-2.0.19/lib/src/link.dart","/zapp/pub/.pub_cache/hosted/pub.dev/url_launcher_platform_interface-2.2.0/lib/src/types.dart","/zapp/pub/.pub_cache/hosted/pub.dev/url_launcher_platform_interface-2.2.0/lib/method_channel_url_launcher.dart"],"names":[],"mappings":"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","file":"main.js"}');
  // Exports:
  return {
    zapp__project__$46zapp_entry: $46zapp_entry,
    zapp__project__lib__main: main,
    zapp__project__$46dart_tool__dartpad__web_plugin_registrant: web_plugin_registrant,
    url_launcher_web: url_launcher_web,
    link: link,
    url_launcher_platform_interface: url_launcher_platform_interface,
    src__link: link$,
    src__shims__dart_ui: dart_ui,
    src__types: types,
    src__url_launcher_platform: url_launcher_platform,
    src__shims__dart_ui_real: dart_ui_real,
    plugin_platform_interface: plugin_platform_interface,
    method_channel_url_launcher: method_channel_url_launcher
  };
}));

//# sourceMappingURL=main.js.map
